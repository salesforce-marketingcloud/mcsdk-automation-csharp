/* 
 * Marketing Cloud REST API
 *
 * Marketing Cloud's REST API is our newest API. It supports multi-channel use cases, is much more lightweight and easy to use than our SOAP API, and is getting more comprehensive with every release.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: mc_sdk@salesforce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Dynamic;
using Newtonsoft.Json.Linq;
using NUnit.Framework;
using Salesforce.MarketingCloud.Api;
using Salesforce.MarketingCloud.Model;
using Salesforce.MarketingCloud.Client;

namespace Salesforce.MarketingCloud.Test
{
    /// <summary>
    ///  Class for testing AssetApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class AssetApiTests //: ApiTests
    {
        private AssetApi instance;

        /// <summary>
        /// Setup only once before all the tests
        /// </summary>
        [OneTimeSetUp]
        public void Init()
        {
            instance = ClientFactory.Create().AssetApi;
        }

        [Test]
        public void GetAssetByIdTest()
        {
            var asset = CreateAssetObject();
            var createAssetResult = instance.CreateAsset(asset);
            var assetToRetrieveId = createAssetResult.Id;

            var getAssetResult = instance.GetAssetById(assetToRetrieveId);

            try
            {
                Assert.AreEqual(asset.CustomerKey, getAssetResult.CustomerKey);
                Assert.AreEqual(asset.AssetType.Id, getAssetResult.AssetType.Id);
                Assert.AreEqual(asset.AssetType.Name, getAssetResult.AssetType.Name);
                Assert.AreEqual(asset.AssetType.DisplayName, getAssetResult.AssetType.DisplayName);
                Assert.AreEqual(asset.Name, getAssetResult.Name);
                Assert.AreEqual(asset.Description, getAssetResult.Description);
            }
            finally
            {
                instance.DeleteAssetById(assetToRetrieveId);
            }
        }

        [Test]
        public void CreateAssetTest()
        {
            var asset = CreateAssetObject();
            var createAssetResult = instance.CreateAsset(asset);

            try
            {
                Assert.AreEqual(asset.CustomerKey, createAssetResult.CustomerKey);
                Assert.AreEqual(asset.AssetType.Id, createAssetResult.AssetType.Id);
                Assert.AreEqual(asset.AssetType.Name, createAssetResult.AssetType.Name);
                Assert.AreEqual(asset.AssetType.DisplayName, createAssetResult.AssetType.DisplayName);
                Assert.AreEqual(asset.Name, createAssetResult.Name);
                Assert.AreEqual(asset.Description, createAssetResult.Description);
            }
            finally
            {
                var createAssetResultId = createAssetResult.Id;
                instance.DeleteAssetById(createAssetResultId);
            }
        }

        [Test]
        public void DeleteAssetByIdTest()
        {
            var asset = CreateAssetObject();
            var createAssetResult = instance.CreateAsset(asset);

            var assetToDeleteId = createAssetResult.Id;
            instance.DeleteAssetById(assetToDeleteId);

            try
            {
                instance.GetAssetById(assetToDeleteId);
                Assert.Fail("No exception thrown");
            }
            catch (ApiException e)
            {
                Assert.AreEqual(404, e.ErrorCode);
                StringAssert.StartsWith("Error calling GetAssetById:", e.Message);
            }
        }

        [Test]
        public void DeleteNonExistingAssetTest()
        {
            var asset = CreateAssetObject();
            var createAssetResult = instance.CreateAsset(asset);

            var assetToDeleteId = createAssetResult.Id;
            instance.DeleteAssetById(assetToDeleteId);

            Assert.DoesNotThrow(() => instance.DeleteAssetById(assetToDeleteId));
        }

        [Test]
        public void PartiallyUpdateAssetByIdTest()
        {
            var asset = CreateAssetObject();
            var createAssetResult = instance.CreateAsset(asset);
            var assetToPartiallyUpdateId = createAssetResult.Id;

            createAssetResult.Description = $"AssetDescription {Guid.NewGuid()}";
            var partiallyUpdateAssetResult = instance.PartiallyUpdateAssetById(assetToPartiallyUpdateId, createAssetResult);

            try
            {
                Assert.AreEqual(createAssetResult.Description, partiallyUpdateAssetResult.Description);

                Assert.AreEqual(asset.CustomerKey, partiallyUpdateAssetResult.CustomerKey);
                Assert.AreEqual(asset.AssetType.Id, partiallyUpdateAssetResult.AssetType.Id);
                Assert.AreEqual(asset.AssetType.Name, partiallyUpdateAssetResult.AssetType.Name);
                Assert.AreEqual(asset.AssetType.DisplayName, partiallyUpdateAssetResult.AssetType.DisplayName);
                Assert.AreEqual(asset.Name, partiallyUpdateAssetResult.Name);
            }
            finally
            {
                instance.DeleteAssetById(assetToPartiallyUpdateId);
            }
        }

        private Asset CreateAssetObject()
        {
            var customerKey = Guid.NewGuid().ToString();
            var name = $"AssetName {Guid.NewGuid()}"; // Asset names within a category and asset type must be unique
            var description = "AssetDescription";
            var assetType = new AssetType(196, "textblock", "Text Block");

            var asset = new Asset(null, customerKey, null, null, assetType, null, null, null, name, description);

            return asset;
        }
    }
}
