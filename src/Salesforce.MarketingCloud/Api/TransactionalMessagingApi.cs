/* 
 * Marketing Cloud REST API
 *
 * Marketing Cloud's REST API is our newest API. It supports multi-channel use cases, is much more lightweight and easy to use than our SOAP API, and is getting more comprehensive with every release.
 *
 * OpenAPI spec version: 1.1.0
 * Contact: mc_sdk@salesforce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using RestSharp.Authenticators;
using Salesforce.MarketingCloud.Authentication;
using Salesforce.MarketingCloud.Client;
using Salesforce.MarketingCloud.Model;

namespace Salesforce.MarketingCloud.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITransactionalMessagingApi
    {
        #region Synchronous Operations
        /// <summary>
        /// createEmailDefinition
        /// </summary>
        /// <remarks>
        /// Creates the definition for an email.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Parameters</param>
        /// <returns>EmailDefinition</returns>
        EmailDefinition CreateEmailDefinition (EmailDefinition body);

        /// <summary>
        /// createEmailDefinition
        /// </summary>
        /// <remarks>
        /// Creates the definition for an email.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Parameters</param>
        /// <returns>ApiResponse of EmailDefinition</returns>
        ApiResponse<EmailDefinition> CreateEmailDefinitionWithHttpInfo (EmailDefinition body);
        /// <summary>
        /// createSmsDefinition
        /// </summary>
        /// <remarks>
        /// Creates the definition for an SMS.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Parameters</param>
        /// <returns>SmsDefinition</returns>
        SmsDefinition CreateSmsDefinition (SmsDefinition body);

        /// <summary>
        /// createSmsDefinition
        /// </summary>
        /// <remarks>
        /// Creates the definition for an SMS.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Parameters</param>
        /// <returns>ApiResponse of SmsDefinition</returns>
        ApiResponse<SmsDefinition> CreateSmsDefinitionWithHttpInfo (SmsDefinition body);
        /// <summary>
        /// deleteEmailDefinition
        /// </summary>
        /// <remarks>
        /// Deletes an email definition. You can&#39;t restore a deleted definition. The deleted definition is archived, and a delete location of the definition key is provided in the response for reference. You can reuse a deleted definition key because the information associated with it is copied to a new unique identifier.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the definition to delete</param>
        /// <returns>DeleteSendDefinitionResponse</returns>
        DeleteSendDefinitionResponse DeleteEmailDefinition (string definitionKey);

        /// <summary>
        /// deleteEmailDefinition
        /// </summary>
        /// <remarks>
        /// Deletes an email definition. You can&#39;t restore a deleted definition. The deleted definition is archived, and a delete location of the definition key is provided in the response for reference. You can reuse a deleted definition key because the information associated with it is copied to a new unique identifier.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the definition to delete</param>
        /// <returns>ApiResponse of DeleteSendDefinitionResponse</returns>
        ApiResponse<DeleteSendDefinitionResponse> DeleteEmailDefinitionWithHttpInfo (string definitionKey);
        /// <summary>
        /// deleteQueuedMessagesForEmailDefinition
        /// </summary>
        /// <remarks>
        /// Deletes the queue for an email definition. The email definition must be in inactive status.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the email definition</param>
        /// <returns>DeleteQueuedMessagesForSendDefinitionResponse</returns>
        DeleteQueuedMessagesForSendDefinitionResponse DeleteQueuedMessagesForEmailDefinition (string definitionKey);

        /// <summary>
        /// deleteQueuedMessagesForEmailDefinition
        /// </summary>
        /// <remarks>
        /// Deletes the queue for an email definition. The email definition must be in inactive status.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the email definition</param>
        /// <returns>ApiResponse of DeleteQueuedMessagesForSendDefinitionResponse</returns>
        ApiResponse<DeleteQueuedMessagesForSendDefinitionResponse> DeleteQueuedMessagesForEmailDefinitionWithHttpInfo (string definitionKey);
        /// <summary>
        /// deleteQueuedMessagesForSmsDefinition
        /// </summary>
        /// <remarks>
        /// Deletes the queue for a SMS definition. The SMS definition must be in inactive status.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the SMS definition</param>
        /// <returns>DeleteQueuedMessagesForSendDefinitionResponse</returns>
        DeleteQueuedMessagesForSendDefinitionResponse DeleteQueuedMessagesForSmsDefinition (string definitionKey);

        /// <summary>
        /// deleteQueuedMessagesForSmsDefinition
        /// </summary>
        /// <remarks>
        /// Deletes the queue for a SMS definition. The SMS definition must be in inactive status.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the SMS definition</param>
        /// <returns>ApiResponse of DeleteQueuedMessagesForSendDefinitionResponse</returns>
        ApiResponse<DeleteQueuedMessagesForSendDefinitionResponse> DeleteQueuedMessagesForSmsDefinitionWithHttpInfo (string definitionKey);
        /// <summary>
        /// deleteSmsDefinition
        /// </summary>
        /// <remarks>
        /// Deletes an sms definition. You can&#39;t restore a deleted definition. The deleted definition is archived, and a delete location of the definition key is provided in the response for reference. You can reuse a deleted definition key because the information associated with it is copied to a new unique identifier.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the definition to delete</param>
        /// <returns>DeleteSendDefinitionResponse</returns>
        DeleteSendDefinitionResponse DeleteSmsDefinition (string definitionKey);

        /// <summary>
        /// deleteSmsDefinition
        /// </summary>
        /// <remarks>
        /// Deletes an sms definition. You can&#39;t restore a deleted definition. The deleted definition is archived, and a delete location of the definition key is provided in the response for reference. You can reuse a deleted definition key because the information associated with it is copied to a new unique identifier.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the definition to delete</param>
        /// <returns>ApiResponse of DeleteSendDefinitionResponse</returns>
        ApiResponse<DeleteSendDefinitionResponse> DeleteSmsDefinitionWithHttpInfo (string definitionKey);
        /// <summary>
        /// getEmailDefinition
        /// </summary>
        /// <remarks>
        /// Gets email definition configuration details for a definition key.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the definition to get</param>
        /// <returns>EmailDefinition</returns>
        EmailDefinition GetEmailDefinition (string definitionKey);

        /// <summary>
        /// getEmailDefinition
        /// </summary>
        /// <remarks>
        /// Gets email definition configuration details for a definition key.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the definition to get</param>
        /// <returns>ApiResponse of EmailDefinition</returns>
        ApiResponse<EmailDefinition> GetEmailDefinitionWithHttpInfo (string definitionKey);
        /// <summary>
        /// getEmailDefinitions
        /// </summary>
        /// <remarks>
        /// Gets a list of email definitions.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter by status type. Accepted values are active, inactive, or deleted. Valid operations are eq and neq. (optional)</param>
        /// <param name="pageSize">Number of definitions, which are array elements, to return per paged response. (optional)</param>
        /// <param name="page">Page number to return. (optional)</param>
        /// <param name="orderBy">Sort by a dimension. You can sort by only one dimension. Accepted values are definitionKey, name, createdDate, modifiedDate, and status. (optional)</param>
        /// <returns>GetEmailDefinitionsResponse</returns>
        GetEmailDefinitionsResponse GetEmailDefinitions (string filter = null, decimal? pageSize = null, decimal? page = null, string orderBy = null);

        /// <summary>
        /// getEmailDefinitions
        /// </summary>
        /// <remarks>
        /// Gets a list of email definitions.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter by status type. Accepted values are active, inactive, or deleted. Valid operations are eq and neq. (optional)</param>
        /// <param name="pageSize">Number of definitions, which are array elements, to return per paged response. (optional)</param>
        /// <param name="page">Page number to return. (optional)</param>
        /// <param name="orderBy">Sort by a dimension. You can sort by only one dimension. Accepted values are definitionKey, name, createdDate, modifiedDate, and status. (optional)</param>
        /// <returns>ApiResponse of GetEmailDefinitionsResponse</returns>
        ApiResponse<GetEmailDefinitionsResponse> GetEmailDefinitionsWithHttpInfo (string filter = null, decimal? pageSize = null, decimal? page = null, string orderBy = null);
        /// <summary>
        /// getEmailSendStatusForRecipient
        /// </summary>
        /// <remarks>
        /// Gets the send status for a message. Because this route is rate-limited, use it for infrequent verification of a messageKey. To collect send status at scale, subscribe to transactional send events using the Event Notification Service.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageKey">Unique identifier to track message send status. You must provide it in singleton requests using the recipient attribute. To provide it in batch requests, use the recipients array attribute. If you don’t provide the message key for recipients, it’s generated in the response.</param>
        /// <returns>GetDefinitionSendStatusForRecipientResponse</returns>
        GetDefinitionSendStatusForRecipientResponse GetEmailSendStatusForRecipient (string messageKey);

        /// <summary>
        /// getEmailSendStatusForRecipient
        /// </summary>
        /// <remarks>
        /// Gets the send status for a message. Because this route is rate-limited, use it for infrequent verification of a messageKey. To collect send status at scale, subscribe to transactional send events using the Event Notification Service.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageKey">Unique identifier to track message send status. You must provide it in singleton requests using the recipient attribute. To provide it in batch requests, use the recipients array attribute. If you don’t provide the message key for recipients, it’s generated in the response.</param>
        /// <returns>ApiResponse of GetDefinitionSendStatusForRecipientResponse</returns>
        ApiResponse<GetDefinitionSendStatusForRecipientResponse> GetEmailSendStatusForRecipientWithHttpInfo (string messageKey);
        /// <summary>
        /// getEmailsNotSentToRecipients
        /// </summary>
        /// <remarks>
        /// Gets a paginated list of messages that were not sent, ordered from oldest to newest.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Only notSent is supported.</param>
        /// <param name="pageSize">Number of messageKeys (array elements) to return per response page. (optional)</param>
        /// <param name="lastEventId">Event ID from which you want the response to start. To obtain the initial event ID, submit a request without a lastEventId. The events in the response are listed top to bottom from oldest to newest. (optional)</param>
        /// <returns>GetDefinitionsNotSentToRecipientsResponse</returns>
        GetDefinitionsNotSentToRecipientsResponse GetEmailsNotSentToRecipients (string type, int? pageSize = null, int? lastEventId = null);

        /// <summary>
        /// getEmailsNotSentToRecipients
        /// </summary>
        /// <remarks>
        /// Gets a paginated list of messages that were not sent, ordered from oldest to newest.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Only notSent is supported.</param>
        /// <param name="pageSize">Number of messageKeys (array elements) to return per response page. (optional)</param>
        /// <param name="lastEventId">Event ID from which you want the response to start. To obtain the initial event ID, submit a request without a lastEventId. The events in the response are listed top to bottom from oldest to newest. (optional)</param>
        /// <returns>ApiResponse of GetDefinitionsNotSentToRecipientsResponse</returns>
        ApiResponse<GetDefinitionsNotSentToRecipientsResponse> GetEmailsNotSentToRecipientsWithHttpInfo (string type, int? pageSize = null, int? lastEventId = null);
        /// <summary>
        /// getQueueMetricsForEmailDefinition
        /// </summary>
        /// <remarks>
        /// Gets metrics for the messages of an email definition. Applies to messages that are accepted but not yet processed.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the email definition</param>
        /// <returns>GetQueueMetricsForSendDefinitionResponse</returns>
        GetQueueMetricsForSendDefinitionResponse GetQueueMetricsForEmailDefinition (string definitionKey);

        /// <summary>
        /// getQueueMetricsForEmailDefinition
        /// </summary>
        /// <remarks>
        /// Gets metrics for the messages of an email definition. Applies to messages that are accepted but not yet processed.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the email definition</param>
        /// <returns>ApiResponse of GetQueueMetricsForSendDefinitionResponse</returns>
        ApiResponse<GetQueueMetricsForSendDefinitionResponse> GetQueueMetricsForEmailDefinitionWithHttpInfo (string definitionKey);
        /// <summary>
        /// getQueueMetricsForSmsDefinition
        /// </summary>
        /// <remarks>
        /// Gets metrics for the messages of a SMS definition. Applies to messages that are accepted but not yet processed.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the SMS definition</param>
        /// <returns>GetQueueMetricsForSendDefinitionResponse</returns>
        GetQueueMetricsForSendDefinitionResponse GetQueueMetricsForSmsDefinition (string definitionKey);

        /// <summary>
        /// getQueueMetricsForSmsDefinition
        /// </summary>
        /// <remarks>
        /// Gets metrics for the messages of a SMS definition. Applies to messages that are accepted but not yet processed.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the SMS definition</param>
        /// <returns>ApiResponse of GetQueueMetricsForSendDefinitionResponse</returns>
        ApiResponse<GetQueueMetricsForSendDefinitionResponse> GetQueueMetricsForSmsDefinitionWithHttpInfo (string definitionKey);
        /// <summary>
        /// getSMSsNotSentToRecipients
        /// </summary>
        /// <remarks>
        /// Gets a paginated list of messages that were not sent, ordered from oldest to newest.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Only notSent is supported.</param>
        /// <param name="pageSize">Number of messageKeys (array elements) to return per response page. (optional)</param>
        /// <param name="lastEventId">Event ID from which you want the response to start. To obtain the initial event ID, submit a request without a lastEventId. The events in the response are listed top to bottom from oldest to newest. (optional)</param>
        /// <returns>GetDefinitionsNotSentToRecipientsResponse</returns>
        GetDefinitionsNotSentToRecipientsResponse GetSMSsNotSentToRecipients (string type, int? pageSize = null, int? lastEventId = null);

        /// <summary>
        /// getSMSsNotSentToRecipients
        /// </summary>
        /// <remarks>
        /// Gets a paginated list of messages that were not sent, ordered from oldest to newest.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Only notSent is supported.</param>
        /// <param name="pageSize">Number of messageKeys (array elements) to return per response page. (optional)</param>
        /// <param name="lastEventId">Event ID from which you want the response to start. To obtain the initial event ID, submit a request without a lastEventId. The events in the response are listed top to bottom from oldest to newest. (optional)</param>
        /// <returns>ApiResponse of GetDefinitionsNotSentToRecipientsResponse</returns>
        ApiResponse<GetDefinitionsNotSentToRecipientsResponse> GetSMSsNotSentToRecipientsWithHttpInfo (string type, int? pageSize = null, int? lastEventId = null);
        /// <summary>
        /// getSmsDefinition
        /// </summary>
        /// <remarks>
        /// Gets SMS definition configuration details for a definition key.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the definition to get</param>
        /// <returns>SmsDefinition</returns>
        SmsDefinition GetSmsDefinition (string definitionKey);

        /// <summary>
        /// getSmsDefinition
        /// </summary>
        /// <remarks>
        /// Gets SMS definition configuration details for a definition key.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the definition to get</param>
        /// <returns>ApiResponse of SmsDefinition</returns>
        ApiResponse<SmsDefinition> GetSmsDefinitionWithHttpInfo (string definitionKey);
        /// <summary>
        /// getSmsDefinitions
        /// </summary>
        /// <remarks>
        /// Gets a list of SMS definitions.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter by status type. Accepted values are active, inactive, or deleted. Valid operations are eq and neq. (optional)</param>
        /// <param name="pageSize">Number of definitions, which are array elements, to return per paged response. (optional)</param>
        /// <param name="page">Page number to return. (optional)</param>
        /// <param name="orderBy">Sort by a dimension. You can sort by only one dimension. Accepted values are definitionKey, name, createdDate, modifiedDate, and status. (optional)</param>
        /// <returns>GetSmsDefinitionsResponse</returns>
        GetSmsDefinitionsResponse GetSmsDefinitions (string filter = null, decimal? pageSize = null, decimal? page = null, string orderBy = null);

        /// <summary>
        /// getSmsDefinitions
        /// </summary>
        /// <remarks>
        /// Gets a list of SMS definitions.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter by status type. Accepted values are active, inactive, or deleted. Valid operations are eq and neq. (optional)</param>
        /// <param name="pageSize">Number of definitions, which are array elements, to return per paged response. (optional)</param>
        /// <param name="page">Page number to return. (optional)</param>
        /// <param name="orderBy">Sort by a dimension. You can sort by only one dimension. Accepted values are definitionKey, name, createdDate, modifiedDate, and status. (optional)</param>
        /// <returns>ApiResponse of GetSmsDefinitionsResponse</returns>
        ApiResponse<GetSmsDefinitionsResponse> GetSmsDefinitionsWithHttpInfo (string filter = null, decimal? pageSize = null, decimal? page = null, string orderBy = null);
        /// <summary>
        /// getSmsSendStatusForRecipient
        /// </summary>
        /// <remarks>
        /// Gets the send status for a message. Because this route is rate-limited, use it for infrequent verification of a messageKey. To collect send status at scale, subscribe to transactional send events using the Event Notification Service.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageKey">Unique identifier to track message send status. You must provide it in singleton requests using the recipient attribute. To provide message key in batch requests, use the recipients array attribute. If you don’t provide the message key for recipients, it’s generated in the response.</param>
        /// <returns>GetDefinitionSendStatusForRecipientResponse</returns>
        GetDefinitionSendStatusForRecipientResponse GetSmsSendStatusForRecipient (string messageKey);

        /// <summary>
        /// getSmsSendStatusForRecipient
        /// </summary>
        /// <remarks>
        /// Gets the send status for a message. Because this route is rate-limited, use it for infrequent verification of a messageKey. To collect send status at scale, subscribe to transactional send events using the Event Notification Service.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageKey">Unique identifier to track message send status. You must provide it in singleton requests using the recipient attribute. To provide message key in batch requests, use the recipients array attribute. If you don’t provide the message key for recipients, it’s generated in the response.</param>
        /// <returns>ApiResponse of GetDefinitionSendStatusForRecipientResponse</returns>
        ApiResponse<GetDefinitionSendStatusForRecipientResponse> GetSmsSendStatusForRecipientWithHttpInfo (string messageKey);
        /// <summary>
        /// partiallyUpdateEmailDefinition
        /// </summary>
        /// <remarks>
        /// Updates a specific email definition.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the definition.</param>
        /// <param name="body">JSON Parameters</param>
        /// <returns>EmailDefinition</returns>
        EmailDefinition PartiallyUpdateEmailDefinition (string definitionKey, UpdateEmailDefinitionRequest body);

        /// <summary>
        /// partiallyUpdateEmailDefinition
        /// </summary>
        /// <remarks>
        /// Updates a specific email definition.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the definition.</param>
        /// <param name="body">JSON Parameters</param>
        /// <returns>ApiResponse of EmailDefinition</returns>
        ApiResponse<EmailDefinition> PartiallyUpdateEmailDefinitionWithHttpInfo (string definitionKey, UpdateEmailDefinitionRequest body);
        /// <summary>
        /// partiallyUpdateSmsDefinition
        /// </summary>
        /// <remarks>
        /// Updates a specific SMS definition.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the definition.</param>
        /// <param name="body">JSON Parameters</param>
        /// <returns>SmsDefinition</returns>
        SmsDefinition PartiallyUpdateSmsDefinition (string definitionKey, UpdateSmsDefinitionRequest body);

        /// <summary>
        /// partiallyUpdateSmsDefinition
        /// </summary>
        /// <remarks>
        /// Updates a specific SMS definition.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the definition.</param>
        /// <param name="body">JSON Parameters</param>
        /// <returns>ApiResponse of SmsDefinition</returns>
        ApiResponse<SmsDefinition> PartiallyUpdateSmsDefinitionWithHttpInfo (string definitionKey, UpdateSmsDefinitionRequest body);
        /// <summary>
        /// sendEmailToMultipleRecipients
        /// </summary>
        /// <remarks>
        /// Sends a message to multiple recipients using an email definition. You can provide a messageKey in the request; otherwise, the messageKey is automatically generated in the response.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Parameters</param>
        /// <returns>SendDefinitionToMultipleRecipientsResponse</returns>
        SendDefinitionToMultipleRecipientsResponse SendEmailToMultipleRecipients (SendEmailToMultipleRecipientsRequest body);

        /// <summary>
        /// sendEmailToMultipleRecipients
        /// </summary>
        /// <remarks>
        /// Sends a message to multiple recipients using an email definition. You can provide a messageKey in the request; otherwise, the messageKey is automatically generated in the response.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Parameters</param>
        /// <returns>ApiResponse of SendDefinitionToMultipleRecipientsResponse</returns>
        ApiResponse<SendDefinitionToMultipleRecipientsResponse> SendEmailToMultipleRecipientsWithHttpInfo (SendEmailToMultipleRecipientsRequest body);
        /// <summary>
        /// sendEmailToSingleRecipient
        /// </summary>
        /// <remarks>
        /// Sends a message to a single recipient via an email definition using a messageKey path parameter.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageKey">Unique identifier used to track message status. Can be automatically created when you create a message or provided as part of the request. Each recipient in a request must have a unique messageKey. If you use a duplicate messageKey in the same send request, the message is rejected.</param>
        /// <param name="body">JSON Parameters</param>
        /// <returns>SendDefinitionToSingleRecipientResponse</returns>
        SendDefinitionToSingleRecipientResponse SendEmailToSingleRecipient (string messageKey, SendEmailToSingleRecipientRequest body);

        /// <summary>
        /// sendEmailToSingleRecipient
        /// </summary>
        /// <remarks>
        /// Sends a message to a single recipient via an email definition using a messageKey path parameter.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageKey">Unique identifier used to track message status. Can be automatically created when you create a message or provided as part of the request. Each recipient in a request must have a unique messageKey. If you use a duplicate messageKey in the same send request, the message is rejected.</param>
        /// <param name="body">JSON Parameters</param>
        /// <returns>ApiResponse of SendDefinitionToSingleRecipientResponse</returns>
        ApiResponse<SendDefinitionToSingleRecipientResponse> SendEmailToSingleRecipientWithHttpInfo (string messageKey, SendEmailToSingleRecipientRequest body);
        /// <summary>
        /// sendSmsToMultipleRecipients
        /// </summary>
        /// <remarks>
        /// Sends a message to multiple recipients using an email definition. You can provide a messageKey in the request; otherwise, the messageKey is automatically generated in the response.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Parameters</param>
        /// <returns>SendDefinitionToMultipleRecipientsResponse</returns>
        SendDefinitionToMultipleRecipientsResponse SendSmsToMultipleRecipients (SendSmsToMultipleRecipientsRequest body);

        /// <summary>
        /// sendSmsToMultipleRecipients
        /// </summary>
        /// <remarks>
        /// Sends a message to multiple recipients using an email definition. You can provide a messageKey in the request; otherwise, the messageKey is automatically generated in the response.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Parameters</param>
        /// <returns>ApiResponse of SendDefinitionToMultipleRecipientsResponse</returns>
        ApiResponse<SendDefinitionToMultipleRecipientsResponse> SendSmsToMultipleRecipientsWithHttpInfo (SendSmsToMultipleRecipientsRequest body);
        /// <summary>
        /// sendSmsToSingleRecipient
        /// </summary>
        /// <remarks>
        /// Sends a message to a single recipient via a SMS definition using a messageKey path parameter.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageKey">Unique identifier of the definition used to track message status. The messageKey can be created automatically when you create a message, or you can provide it as part of the request. Each recipient in a request must have a unique messageKey. If you use a duplicate messageKey in the same send request, the message is rejected.</param>
        /// <param name="body">JSON Parameters</param>
        /// <returns>SendDefinitionToSingleRecipientResponse</returns>
        SendDefinitionToSingleRecipientResponse SendSmsToSingleRecipient (string messageKey, SendSmsToSingleRecipientRequest body);

        /// <summary>
        /// sendSmsToSingleRecipient
        /// </summary>
        /// <remarks>
        /// Sends a message to a single recipient via a SMS definition using a messageKey path parameter.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageKey">Unique identifier of the definition used to track message status. The messageKey can be created automatically when you create a message, or you can provide it as part of the request. Each recipient in a request must have a unique messageKey. If you use a duplicate messageKey in the same send request, the message is rejected.</param>
        /// <param name="body">JSON Parameters</param>
        /// <returns>ApiResponse of SendDefinitionToSingleRecipientResponse</returns>
        ApiResponse<SendDefinitionToSingleRecipientResponse> SendSmsToSingleRecipientWithHttpInfo (string messageKey, SendSmsToSingleRecipientRequest body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// createEmailDefinition
        /// </summary>
        /// <remarks>
        /// Creates the definition for an email.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Parameters</param>
        /// <returns>Task of EmailDefinition</returns>
        System.Threading.Tasks.Task<EmailDefinition> CreateEmailDefinitionAsync (EmailDefinition body);

        /// <summary>
        /// createEmailDefinition
        /// </summary>
        /// <remarks>
        /// Creates the definition for an email.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Parameters</param>
        /// <returns>Task of ApiResponse (EmailDefinition)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailDefinition>> CreateEmailDefinitionAsyncWithHttpInfo (EmailDefinition body);
        /// <summary>
        /// createSmsDefinition
        /// </summary>
        /// <remarks>
        /// Creates the definition for an SMS.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Parameters</param>
        /// <returns>Task of SmsDefinition</returns>
        System.Threading.Tasks.Task<SmsDefinition> CreateSmsDefinitionAsync (SmsDefinition body);

        /// <summary>
        /// createSmsDefinition
        /// </summary>
        /// <remarks>
        /// Creates the definition for an SMS.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Parameters</param>
        /// <returns>Task of ApiResponse (SmsDefinition)</returns>
        System.Threading.Tasks.Task<ApiResponse<SmsDefinition>> CreateSmsDefinitionAsyncWithHttpInfo (SmsDefinition body);
        /// <summary>
        /// deleteEmailDefinition
        /// </summary>
        /// <remarks>
        /// Deletes an email definition. You can&#39;t restore a deleted definition. The deleted definition is archived, and a delete location of the definition key is provided in the response for reference. You can reuse a deleted definition key because the information associated with it is copied to a new unique identifier.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the definition to delete</param>
        /// <returns>Task of DeleteSendDefinitionResponse</returns>
        System.Threading.Tasks.Task<DeleteSendDefinitionResponse> DeleteEmailDefinitionAsync (string definitionKey);

        /// <summary>
        /// deleteEmailDefinition
        /// </summary>
        /// <remarks>
        /// Deletes an email definition. You can&#39;t restore a deleted definition. The deleted definition is archived, and a delete location of the definition key is provided in the response for reference. You can reuse a deleted definition key because the information associated with it is copied to a new unique identifier.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the definition to delete</param>
        /// <returns>Task of ApiResponse (DeleteSendDefinitionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteSendDefinitionResponse>> DeleteEmailDefinitionAsyncWithHttpInfo (string definitionKey);
        /// <summary>
        /// deleteQueuedMessagesForEmailDefinition
        /// </summary>
        /// <remarks>
        /// Deletes the queue for an email definition. The email definition must be in inactive status.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the email definition</param>
        /// <returns>Task of DeleteQueuedMessagesForSendDefinitionResponse</returns>
        System.Threading.Tasks.Task<DeleteQueuedMessagesForSendDefinitionResponse> DeleteQueuedMessagesForEmailDefinitionAsync (string definitionKey);

        /// <summary>
        /// deleteQueuedMessagesForEmailDefinition
        /// </summary>
        /// <remarks>
        /// Deletes the queue for an email definition. The email definition must be in inactive status.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the email definition</param>
        /// <returns>Task of ApiResponse (DeleteQueuedMessagesForSendDefinitionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteQueuedMessagesForSendDefinitionResponse>> DeleteQueuedMessagesForEmailDefinitionAsyncWithHttpInfo (string definitionKey);
        /// <summary>
        /// deleteQueuedMessagesForSmsDefinition
        /// </summary>
        /// <remarks>
        /// Deletes the queue for a SMS definition. The SMS definition must be in inactive status.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the SMS definition</param>
        /// <returns>Task of DeleteQueuedMessagesForSendDefinitionResponse</returns>
        System.Threading.Tasks.Task<DeleteQueuedMessagesForSendDefinitionResponse> DeleteQueuedMessagesForSmsDefinitionAsync (string definitionKey);

        /// <summary>
        /// deleteQueuedMessagesForSmsDefinition
        /// </summary>
        /// <remarks>
        /// Deletes the queue for a SMS definition. The SMS definition must be in inactive status.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the SMS definition</param>
        /// <returns>Task of ApiResponse (DeleteQueuedMessagesForSendDefinitionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteQueuedMessagesForSendDefinitionResponse>> DeleteQueuedMessagesForSmsDefinitionAsyncWithHttpInfo (string definitionKey);
        /// <summary>
        /// deleteSmsDefinition
        /// </summary>
        /// <remarks>
        /// Deletes an sms definition. You can&#39;t restore a deleted definition. The deleted definition is archived, and a delete location of the definition key is provided in the response for reference. You can reuse a deleted definition key because the information associated with it is copied to a new unique identifier.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the definition to delete</param>
        /// <returns>Task of DeleteSendDefinitionResponse</returns>
        System.Threading.Tasks.Task<DeleteSendDefinitionResponse> DeleteSmsDefinitionAsync (string definitionKey);

        /// <summary>
        /// deleteSmsDefinition
        /// </summary>
        /// <remarks>
        /// Deletes an sms definition. You can&#39;t restore a deleted definition. The deleted definition is archived, and a delete location of the definition key is provided in the response for reference. You can reuse a deleted definition key because the information associated with it is copied to a new unique identifier.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the definition to delete</param>
        /// <returns>Task of ApiResponse (DeleteSendDefinitionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteSendDefinitionResponse>> DeleteSmsDefinitionAsyncWithHttpInfo (string definitionKey);
        /// <summary>
        /// getEmailDefinition
        /// </summary>
        /// <remarks>
        /// Gets email definition configuration details for a definition key.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the definition to get</param>
        /// <returns>Task of EmailDefinition</returns>
        System.Threading.Tasks.Task<EmailDefinition> GetEmailDefinitionAsync (string definitionKey);

        /// <summary>
        /// getEmailDefinition
        /// </summary>
        /// <remarks>
        /// Gets email definition configuration details for a definition key.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the definition to get</param>
        /// <returns>Task of ApiResponse (EmailDefinition)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailDefinition>> GetEmailDefinitionAsyncWithHttpInfo (string definitionKey);
        /// <summary>
        /// getEmailDefinitions
        /// </summary>
        /// <remarks>
        /// Gets a list of email definitions.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter by status type. Accepted values are active, inactive, or deleted. Valid operations are eq and neq. (optional)</param>
        /// <param name="pageSize">Number of definitions, which are array elements, to return per paged response. (optional)</param>
        /// <param name="page">Page number to return. (optional)</param>
        /// <param name="orderBy">Sort by a dimension. You can sort by only one dimension. Accepted values are definitionKey, name, createdDate, modifiedDate, and status. (optional)</param>
        /// <returns>Task of GetEmailDefinitionsResponse</returns>
        System.Threading.Tasks.Task<GetEmailDefinitionsResponse> GetEmailDefinitionsAsync (string filter = null, decimal? pageSize = null, decimal? page = null, string orderBy = null);

        /// <summary>
        /// getEmailDefinitions
        /// </summary>
        /// <remarks>
        /// Gets a list of email definitions.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter by status type. Accepted values are active, inactive, or deleted. Valid operations are eq and neq. (optional)</param>
        /// <param name="pageSize">Number of definitions, which are array elements, to return per paged response. (optional)</param>
        /// <param name="page">Page number to return. (optional)</param>
        /// <param name="orderBy">Sort by a dimension. You can sort by only one dimension. Accepted values are definitionKey, name, createdDate, modifiedDate, and status. (optional)</param>
        /// <returns>Task of ApiResponse (GetEmailDefinitionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetEmailDefinitionsResponse>> GetEmailDefinitionsAsyncWithHttpInfo (string filter = null, decimal? pageSize = null, decimal? page = null, string orderBy = null);
        /// <summary>
        /// getEmailSendStatusForRecipient
        /// </summary>
        /// <remarks>
        /// Gets the send status for a message. Because this route is rate-limited, use it for infrequent verification of a messageKey. To collect send status at scale, subscribe to transactional send events using the Event Notification Service.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageKey">Unique identifier to track message send status. You must provide it in singleton requests using the recipient attribute. To provide it in batch requests, use the recipients array attribute. If you don’t provide the message key for recipients, it’s generated in the response.</param>
        /// <returns>Task of GetDefinitionSendStatusForRecipientResponse</returns>
        System.Threading.Tasks.Task<GetDefinitionSendStatusForRecipientResponse> GetEmailSendStatusForRecipientAsync (string messageKey);

        /// <summary>
        /// getEmailSendStatusForRecipient
        /// </summary>
        /// <remarks>
        /// Gets the send status for a message. Because this route is rate-limited, use it for infrequent verification of a messageKey. To collect send status at scale, subscribe to transactional send events using the Event Notification Service.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageKey">Unique identifier to track message send status. You must provide it in singleton requests using the recipient attribute. To provide it in batch requests, use the recipients array attribute. If you don’t provide the message key for recipients, it’s generated in the response.</param>
        /// <returns>Task of ApiResponse (GetDefinitionSendStatusForRecipientResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetDefinitionSendStatusForRecipientResponse>> GetEmailSendStatusForRecipientAsyncWithHttpInfo (string messageKey);
        /// <summary>
        /// getEmailsNotSentToRecipients
        /// </summary>
        /// <remarks>
        /// Gets a paginated list of messages that were not sent, ordered from oldest to newest.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Only notSent is supported.</param>
        /// <param name="pageSize">Number of messageKeys (array elements) to return per response page. (optional)</param>
        /// <param name="lastEventId">Event ID from which you want the response to start. To obtain the initial event ID, submit a request without a lastEventId. The events in the response are listed top to bottom from oldest to newest. (optional)</param>
        /// <returns>Task of GetDefinitionsNotSentToRecipientsResponse</returns>
        System.Threading.Tasks.Task<GetDefinitionsNotSentToRecipientsResponse> GetEmailsNotSentToRecipientsAsync (string type, int? pageSize = null, int? lastEventId = null);

        /// <summary>
        /// getEmailsNotSentToRecipients
        /// </summary>
        /// <remarks>
        /// Gets a paginated list of messages that were not sent, ordered from oldest to newest.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Only notSent is supported.</param>
        /// <param name="pageSize">Number of messageKeys (array elements) to return per response page. (optional)</param>
        /// <param name="lastEventId">Event ID from which you want the response to start. To obtain the initial event ID, submit a request without a lastEventId. The events in the response are listed top to bottom from oldest to newest. (optional)</param>
        /// <returns>Task of ApiResponse (GetDefinitionsNotSentToRecipientsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetDefinitionsNotSentToRecipientsResponse>> GetEmailsNotSentToRecipientsAsyncWithHttpInfo (string type, int? pageSize = null, int? lastEventId = null);
        /// <summary>
        /// getQueueMetricsForEmailDefinition
        /// </summary>
        /// <remarks>
        /// Gets metrics for the messages of an email definition. Applies to messages that are accepted but not yet processed.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the email definition</param>
        /// <returns>Task of GetQueueMetricsForSendDefinitionResponse</returns>
        System.Threading.Tasks.Task<GetQueueMetricsForSendDefinitionResponse> GetQueueMetricsForEmailDefinitionAsync (string definitionKey);

        /// <summary>
        /// getQueueMetricsForEmailDefinition
        /// </summary>
        /// <remarks>
        /// Gets metrics for the messages of an email definition. Applies to messages that are accepted but not yet processed.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the email definition</param>
        /// <returns>Task of ApiResponse (GetQueueMetricsForSendDefinitionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetQueueMetricsForSendDefinitionResponse>> GetQueueMetricsForEmailDefinitionAsyncWithHttpInfo (string definitionKey);
        /// <summary>
        /// getQueueMetricsForSmsDefinition
        /// </summary>
        /// <remarks>
        /// Gets metrics for the messages of a SMS definition. Applies to messages that are accepted but not yet processed.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the SMS definition</param>
        /// <returns>Task of GetQueueMetricsForSendDefinitionResponse</returns>
        System.Threading.Tasks.Task<GetQueueMetricsForSendDefinitionResponse> GetQueueMetricsForSmsDefinitionAsync (string definitionKey);

        /// <summary>
        /// getQueueMetricsForSmsDefinition
        /// </summary>
        /// <remarks>
        /// Gets metrics for the messages of a SMS definition. Applies to messages that are accepted but not yet processed.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the SMS definition</param>
        /// <returns>Task of ApiResponse (GetQueueMetricsForSendDefinitionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetQueueMetricsForSendDefinitionResponse>> GetQueueMetricsForSmsDefinitionAsyncWithHttpInfo (string definitionKey);
        /// <summary>
        /// getSMSsNotSentToRecipients
        /// </summary>
        /// <remarks>
        /// Gets a paginated list of messages that were not sent, ordered from oldest to newest.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Only notSent is supported.</param>
        /// <param name="pageSize">Number of messageKeys (array elements) to return per response page. (optional)</param>
        /// <param name="lastEventId">Event ID from which you want the response to start. To obtain the initial event ID, submit a request without a lastEventId. The events in the response are listed top to bottom from oldest to newest. (optional)</param>
        /// <returns>Task of GetDefinitionsNotSentToRecipientsResponse</returns>
        System.Threading.Tasks.Task<GetDefinitionsNotSentToRecipientsResponse> GetSMSsNotSentToRecipientsAsync (string type, int? pageSize = null, int? lastEventId = null);

        /// <summary>
        /// getSMSsNotSentToRecipients
        /// </summary>
        /// <remarks>
        /// Gets a paginated list of messages that were not sent, ordered from oldest to newest.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Only notSent is supported.</param>
        /// <param name="pageSize">Number of messageKeys (array elements) to return per response page. (optional)</param>
        /// <param name="lastEventId">Event ID from which you want the response to start. To obtain the initial event ID, submit a request without a lastEventId. The events in the response are listed top to bottom from oldest to newest. (optional)</param>
        /// <returns>Task of ApiResponse (GetDefinitionsNotSentToRecipientsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetDefinitionsNotSentToRecipientsResponse>> GetSMSsNotSentToRecipientsAsyncWithHttpInfo (string type, int? pageSize = null, int? lastEventId = null);
        /// <summary>
        /// getSmsDefinition
        /// </summary>
        /// <remarks>
        /// Gets SMS definition configuration details for a definition key.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the definition to get</param>
        /// <returns>Task of SmsDefinition</returns>
        System.Threading.Tasks.Task<SmsDefinition> GetSmsDefinitionAsync (string definitionKey);

        /// <summary>
        /// getSmsDefinition
        /// </summary>
        /// <remarks>
        /// Gets SMS definition configuration details for a definition key.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the definition to get</param>
        /// <returns>Task of ApiResponse (SmsDefinition)</returns>
        System.Threading.Tasks.Task<ApiResponse<SmsDefinition>> GetSmsDefinitionAsyncWithHttpInfo (string definitionKey);
        /// <summary>
        /// getSmsDefinitions
        /// </summary>
        /// <remarks>
        /// Gets a list of SMS definitions.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter by status type. Accepted values are active, inactive, or deleted. Valid operations are eq and neq. (optional)</param>
        /// <param name="pageSize">Number of definitions, which are array elements, to return per paged response. (optional)</param>
        /// <param name="page">Page number to return. (optional)</param>
        /// <param name="orderBy">Sort by a dimension. You can sort by only one dimension. Accepted values are definitionKey, name, createdDate, modifiedDate, and status. (optional)</param>
        /// <returns>Task of GetSmsDefinitionsResponse</returns>
        System.Threading.Tasks.Task<GetSmsDefinitionsResponse> GetSmsDefinitionsAsync (string filter = null, decimal? pageSize = null, decimal? page = null, string orderBy = null);

        /// <summary>
        /// getSmsDefinitions
        /// </summary>
        /// <remarks>
        /// Gets a list of SMS definitions.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter by status type. Accepted values are active, inactive, or deleted. Valid operations are eq and neq. (optional)</param>
        /// <param name="pageSize">Number of definitions, which are array elements, to return per paged response. (optional)</param>
        /// <param name="page">Page number to return. (optional)</param>
        /// <param name="orderBy">Sort by a dimension. You can sort by only one dimension. Accepted values are definitionKey, name, createdDate, modifiedDate, and status. (optional)</param>
        /// <returns>Task of ApiResponse (GetSmsDefinitionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetSmsDefinitionsResponse>> GetSmsDefinitionsAsyncWithHttpInfo (string filter = null, decimal? pageSize = null, decimal? page = null, string orderBy = null);
        /// <summary>
        /// getSmsSendStatusForRecipient
        /// </summary>
        /// <remarks>
        /// Gets the send status for a message. Because this route is rate-limited, use it for infrequent verification of a messageKey. To collect send status at scale, subscribe to transactional send events using the Event Notification Service.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageKey">Unique identifier to track message send status. You must provide it in singleton requests using the recipient attribute. To provide message key in batch requests, use the recipients array attribute. If you don’t provide the message key for recipients, it’s generated in the response.</param>
        /// <returns>Task of GetDefinitionSendStatusForRecipientResponse</returns>
        System.Threading.Tasks.Task<GetDefinitionSendStatusForRecipientResponse> GetSmsSendStatusForRecipientAsync (string messageKey);

        /// <summary>
        /// getSmsSendStatusForRecipient
        /// </summary>
        /// <remarks>
        /// Gets the send status for a message. Because this route is rate-limited, use it for infrequent verification of a messageKey. To collect send status at scale, subscribe to transactional send events using the Event Notification Service.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageKey">Unique identifier to track message send status. You must provide it in singleton requests using the recipient attribute. To provide message key in batch requests, use the recipients array attribute. If you don’t provide the message key for recipients, it’s generated in the response.</param>
        /// <returns>Task of ApiResponse (GetDefinitionSendStatusForRecipientResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetDefinitionSendStatusForRecipientResponse>> GetSmsSendStatusForRecipientAsyncWithHttpInfo (string messageKey);
        /// <summary>
        /// partiallyUpdateEmailDefinition
        /// </summary>
        /// <remarks>
        /// Updates a specific email definition.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the definition.</param>
        /// <param name="body">JSON Parameters</param>
        /// <returns>Task of EmailDefinition</returns>
        System.Threading.Tasks.Task<EmailDefinition> PartiallyUpdateEmailDefinitionAsync (string definitionKey, UpdateEmailDefinitionRequest body);

        /// <summary>
        /// partiallyUpdateEmailDefinition
        /// </summary>
        /// <remarks>
        /// Updates a specific email definition.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the definition.</param>
        /// <param name="body">JSON Parameters</param>
        /// <returns>Task of ApiResponse (EmailDefinition)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailDefinition>> PartiallyUpdateEmailDefinitionAsyncWithHttpInfo (string definitionKey, UpdateEmailDefinitionRequest body);
        /// <summary>
        /// partiallyUpdateSmsDefinition
        /// </summary>
        /// <remarks>
        /// Updates a specific SMS definition.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the definition.</param>
        /// <param name="body">JSON Parameters</param>
        /// <returns>Task of SmsDefinition</returns>
        System.Threading.Tasks.Task<SmsDefinition> PartiallyUpdateSmsDefinitionAsync (string definitionKey, UpdateSmsDefinitionRequest body);

        /// <summary>
        /// partiallyUpdateSmsDefinition
        /// </summary>
        /// <remarks>
        /// Updates a specific SMS definition.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the definition.</param>
        /// <param name="body">JSON Parameters</param>
        /// <returns>Task of ApiResponse (SmsDefinition)</returns>
        System.Threading.Tasks.Task<ApiResponse<SmsDefinition>> PartiallyUpdateSmsDefinitionAsyncWithHttpInfo (string definitionKey, UpdateSmsDefinitionRequest body);
        /// <summary>
        /// sendEmailToMultipleRecipients
        /// </summary>
        /// <remarks>
        /// Sends a message to multiple recipients using an email definition. You can provide a messageKey in the request; otherwise, the messageKey is automatically generated in the response.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Parameters</param>
        /// <returns>Task of SendDefinitionToMultipleRecipientsResponse</returns>
        System.Threading.Tasks.Task<SendDefinitionToMultipleRecipientsResponse> SendEmailToMultipleRecipientsAsync (SendEmailToMultipleRecipientsRequest body);

        /// <summary>
        /// sendEmailToMultipleRecipients
        /// </summary>
        /// <remarks>
        /// Sends a message to multiple recipients using an email definition. You can provide a messageKey in the request; otherwise, the messageKey is automatically generated in the response.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Parameters</param>
        /// <returns>Task of ApiResponse (SendDefinitionToMultipleRecipientsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SendDefinitionToMultipleRecipientsResponse>> SendEmailToMultipleRecipientsAsyncWithHttpInfo (SendEmailToMultipleRecipientsRequest body);
        /// <summary>
        /// sendEmailToSingleRecipient
        /// </summary>
        /// <remarks>
        /// Sends a message to a single recipient via an email definition using a messageKey path parameter.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageKey">Unique identifier used to track message status. Can be automatically created when you create a message or provided as part of the request. Each recipient in a request must have a unique messageKey. If you use a duplicate messageKey in the same send request, the message is rejected.</param>
        /// <param name="body">JSON Parameters</param>
        /// <returns>Task of SendDefinitionToSingleRecipientResponse</returns>
        System.Threading.Tasks.Task<SendDefinitionToSingleRecipientResponse> SendEmailToSingleRecipientAsync (string messageKey, SendEmailToSingleRecipientRequest body);

        /// <summary>
        /// sendEmailToSingleRecipient
        /// </summary>
        /// <remarks>
        /// Sends a message to a single recipient via an email definition using a messageKey path parameter.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageKey">Unique identifier used to track message status. Can be automatically created when you create a message or provided as part of the request. Each recipient in a request must have a unique messageKey. If you use a duplicate messageKey in the same send request, the message is rejected.</param>
        /// <param name="body">JSON Parameters</param>
        /// <returns>Task of ApiResponse (SendDefinitionToSingleRecipientResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SendDefinitionToSingleRecipientResponse>> SendEmailToSingleRecipientAsyncWithHttpInfo (string messageKey, SendEmailToSingleRecipientRequest body);
        /// <summary>
        /// sendSmsToMultipleRecipients
        /// </summary>
        /// <remarks>
        /// Sends a message to multiple recipients using an email definition. You can provide a messageKey in the request; otherwise, the messageKey is automatically generated in the response.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Parameters</param>
        /// <returns>Task of SendDefinitionToMultipleRecipientsResponse</returns>
        System.Threading.Tasks.Task<SendDefinitionToMultipleRecipientsResponse> SendSmsToMultipleRecipientsAsync (SendSmsToMultipleRecipientsRequest body);

        /// <summary>
        /// sendSmsToMultipleRecipients
        /// </summary>
        /// <remarks>
        /// Sends a message to multiple recipients using an email definition. You can provide a messageKey in the request; otherwise, the messageKey is automatically generated in the response.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Parameters</param>
        /// <returns>Task of ApiResponse (SendDefinitionToMultipleRecipientsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SendDefinitionToMultipleRecipientsResponse>> SendSmsToMultipleRecipientsAsyncWithHttpInfo (SendSmsToMultipleRecipientsRequest body);
        /// <summary>
        /// sendSmsToSingleRecipient
        /// </summary>
        /// <remarks>
        /// Sends a message to a single recipient via a SMS definition using a messageKey path parameter.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageKey">Unique identifier of the definition used to track message status. The messageKey can be created automatically when you create a message, or you can provide it as part of the request. Each recipient in a request must have a unique messageKey. If you use a duplicate messageKey in the same send request, the message is rejected.</param>
        /// <param name="body">JSON Parameters</param>
        /// <returns>Task of SendDefinitionToSingleRecipientResponse</returns>
        System.Threading.Tasks.Task<SendDefinitionToSingleRecipientResponse> SendSmsToSingleRecipientAsync (string messageKey, SendSmsToSingleRecipientRequest body);

        /// <summary>
        /// sendSmsToSingleRecipient
        /// </summary>
        /// <remarks>
        /// Sends a message to a single recipient via a SMS definition using a messageKey path parameter.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageKey">Unique identifier of the definition used to track message status. The messageKey can be created automatically when you create a message, or you can provide it as part of the request. Each recipient in a request must have a unique messageKey. If you use a duplicate messageKey in the same send request, the message is rejected.</param>
        /// <param name="body">JSON Parameters</param>
        /// <returns>Task of ApiResponse (SendDefinitionToSingleRecipientResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SendDefinitionToSingleRecipientResponse>> SendSmsToSingleRecipientAsyncWithHttpInfo (string messageKey, SendSmsToSingleRecipientRequest body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TransactionalMessagingApi : BaseApi, ITransactionalMessagingApi
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionalMessagingApi"/> class.
        /// </summary>
        /// <returns></returns>
        internal TransactionalMessagingApi(string authBaseUrl, string clientId, string clientSecret, string accountId, string scope)
            : base(authBaseUrl, clientId, clientSecret, accountId, scope)
        {
        }

        /// <summary>
        /// createEmailDefinition Creates the definition for an email.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Parameters</param>
        /// <returns>EmailDefinition</returns>
        public EmailDefinition CreateEmailDefinition (EmailDefinition body)
        {
             ApiResponse<EmailDefinition> localVarResponse = CreateEmailDefinitionWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// createEmailDefinition Creates the definition for an email.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Parameters</param>
        /// <returns>ApiResponse of EmailDefinition</returns>
        public ApiResponse< EmailDefinition > CreateEmailDefinitionWithHttpInfo (EmailDefinition body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling TransactionalMessagingApi->CreateEmailDefinition");

            var localVarPath = "/messaging/v1/email/definitions/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateEmailDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailDefinition>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailDefinition) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailDefinition)));
        }

        /// <summary>
        /// createEmailDefinition Creates the definition for an email.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Parameters</param>
        /// <returns>Task of EmailDefinition</returns>
        public async System.Threading.Tasks.Task<EmailDefinition> CreateEmailDefinitionAsync (EmailDefinition body)
        {
             ApiResponse<EmailDefinition> localVarResponse = await CreateEmailDefinitionAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// createEmailDefinition Creates the definition for an email.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Parameters</param>
        /// <returns>Task of ApiResponse (EmailDefinition)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailDefinition>> CreateEmailDefinitionAsyncWithHttpInfo (EmailDefinition body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling TransactionalMessagingApi->CreateEmailDefinition");

            var localVarPath = "/messaging/v1/email/definitions/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateEmailDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailDefinition>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailDefinition) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailDefinition)));
        }

        /// <summary>
        /// createSmsDefinition Creates the definition for an SMS.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Parameters</param>
        /// <returns>SmsDefinition</returns>
        public SmsDefinition CreateSmsDefinition (SmsDefinition body)
        {
             ApiResponse<SmsDefinition> localVarResponse = CreateSmsDefinitionWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// createSmsDefinition Creates the definition for an SMS.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Parameters</param>
        /// <returns>ApiResponse of SmsDefinition</returns>
        public ApiResponse< SmsDefinition > CreateSmsDefinitionWithHttpInfo (SmsDefinition body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling TransactionalMessagingApi->CreateSmsDefinition");

            var localVarPath = "/messaging/v1/sms/definitions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateSmsDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SmsDefinition>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SmsDefinition) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SmsDefinition)));
        }

        /// <summary>
        /// createSmsDefinition Creates the definition for an SMS.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Parameters</param>
        /// <returns>Task of SmsDefinition</returns>
        public async System.Threading.Tasks.Task<SmsDefinition> CreateSmsDefinitionAsync (SmsDefinition body)
        {
             ApiResponse<SmsDefinition> localVarResponse = await CreateSmsDefinitionAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// createSmsDefinition Creates the definition for an SMS.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Parameters</param>
        /// <returns>Task of ApiResponse (SmsDefinition)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SmsDefinition>> CreateSmsDefinitionAsyncWithHttpInfo (SmsDefinition body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling TransactionalMessagingApi->CreateSmsDefinition");

            var localVarPath = "/messaging/v1/sms/definitions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateSmsDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SmsDefinition>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SmsDefinition) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SmsDefinition)));
        }

        /// <summary>
        /// deleteEmailDefinition Deletes an email definition. You can&#39;t restore a deleted definition. The deleted definition is archived, and a delete location of the definition key is provided in the response for reference. You can reuse a deleted definition key because the information associated with it is copied to a new unique identifier.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the definition to delete</param>
        /// <returns>DeleteSendDefinitionResponse</returns>
        public DeleteSendDefinitionResponse DeleteEmailDefinition (string definitionKey)
        {
             ApiResponse<DeleteSendDefinitionResponse> localVarResponse = DeleteEmailDefinitionWithHttpInfo(definitionKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// deleteEmailDefinition Deletes an email definition. You can&#39;t restore a deleted definition. The deleted definition is archived, and a delete location of the definition key is provided in the response for reference. You can reuse a deleted definition key because the information associated with it is copied to a new unique identifier.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the definition to delete</param>
        /// <returns>ApiResponse of DeleteSendDefinitionResponse</returns>
        public ApiResponse< DeleteSendDefinitionResponse > DeleteEmailDefinitionWithHttpInfo (string definitionKey)
        {
            // verify the required parameter 'definitionKey' is set
            if (definitionKey == null)
                throw new ApiException(400, "Missing required parameter 'definitionKey' when calling TransactionalMessagingApi->DeleteEmailDefinition");

            var localVarPath = "/messaging/v1/email/definitions/{definitionKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (definitionKey != null) localVarPathParams.Add("definitionKey", this.Configuration.ApiClient.ParameterToString(definitionKey)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteEmailDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeleteSendDefinitionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeleteSendDefinitionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeleteSendDefinitionResponse)));
        }

        /// <summary>
        /// deleteEmailDefinition Deletes an email definition. You can&#39;t restore a deleted definition. The deleted definition is archived, and a delete location of the definition key is provided in the response for reference. You can reuse a deleted definition key because the information associated with it is copied to a new unique identifier.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the definition to delete</param>
        /// <returns>Task of DeleteSendDefinitionResponse</returns>
        public async System.Threading.Tasks.Task<DeleteSendDefinitionResponse> DeleteEmailDefinitionAsync (string definitionKey)
        {
             ApiResponse<DeleteSendDefinitionResponse> localVarResponse = await DeleteEmailDefinitionAsyncWithHttpInfo(definitionKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// deleteEmailDefinition Deletes an email definition. You can&#39;t restore a deleted definition. The deleted definition is archived, and a delete location of the definition key is provided in the response for reference. You can reuse a deleted definition key because the information associated with it is copied to a new unique identifier.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the definition to delete</param>
        /// <returns>Task of ApiResponse (DeleteSendDefinitionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DeleteSendDefinitionResponse>> DeleteEmailDefinitionAsyncWithHttpInfo (string definitionKey)
        {
            // verify the required parameter 'definitionKey' is set
            if (definitionKey == null)
                throw new ApiException(400, "Missing required parameter 'definitionKey' when calling TransactionalMessagingApi->DeleteEmailDefinition");

            var localVarPath = "/messaging/v1/email/definitions/{definitionKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (definitionKey != null) localVarPathParams.Add("definitionKey", this.Configuration.ApiClient.ParameterToString(definitionKey)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteEmailDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeleteSendDefinitionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeleteSendDefinitionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeleteSendDefinitionResponse)));
        }

        /// <summary>
        /// deleteQueuedMessagesForEmailDefinition Deletes the queue for an email definition. The email definition must be in inactive status.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the email definition</param>
        /// <returns>DeleteQueuedMessagesForSendDefinitionResponse</returns>
        public DeleteQueuedMessagesForSendDefinitionResponse DeleteQueuedMessagesForEmailDefinition (string definitionKey)
        {
             ApiResponse<DeleteQueuedMessagesForSendDefinitionResponse> localVarResponse = DeleteQueuedMessagesForEmailDefinitionWithHttpInfo(definitionKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// deleteQueuedMessagesForEmailDefinition Deletes the queue for an email definition. The email definition must be in inactive status.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the email definition</param>
        /// <returns>ApiResponse of DeleteQueuedMessagesForSendDefinitionResponse</returns>
        public ApiResponse< DeleteQueuedMessagesForSendDefinitionResponse > DeleteQueuedMessagesForEmailDefinitionWithHttpInfo (string definitionKey)
        {
            // verify the required parameter 'definitionKey' is set
            if (definitionKey == null)
                throw new ApiException(400, "Missing required parameter 'definitionKey' when calling TransactionalMessagingApi->DeleteQueuedMessagesForEmailDefinition");

            var localVarPath = "/messaging/v1/email/definitions/{definitionKey}/queue";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (definitionKey != null) localVarPathParams.Add("definitionKey", this.Configuration.ApiClient.ParameterToString(definitionKey)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteQueuedMessagesForEmailDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeleteQueuedMessagesForSendDefinitionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeleteQueuedMessagesForSendDefinitionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeleteQueuedMessagesForSendDefinitionResponse)));
        }

        /// <summary>
        /// deleteQueuedMessagesForEmailDefinition Deletes the queue for an email definition. The email definition must be in inactive status.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the email definition</param>
        /// <returns>Task of DeleteQueuedMessagesForSendDefinitionResponse</returns>
        public async System.Threading.Tasks.Task<DeleteQueuedMessagesForSendDefinitionResponse> DeleteQueuedMessagesForEmailDefinitionAsync (string definitionKey)
        {
             ApiResponse<DeleteQueuedMessagesForSendDefinitionResponse> localVarResponse = await DeleteQueuedMessagesForEmailDefinitionAsyncWithHttpInfo(definitionKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// deleteQueuedMessagesForEmailDefinition Deletes the queue for an email definition. The email definition must be in inactive status.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the email definition</param>
        /// <returns>Task of ApiResponse (DeleteQueuedMessagesForSendDefinitionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DeleteQueuedMessagesForSendDefinitionResponse>> DeleteQueuedMessagesForEmailDefinitionAsyncWithHttpInfo (string definitionKey)
        {
            // verify the required parameter 'definitionKey' is set
            if (definitionKey == null)
                throw new ApiException(400, "Missing required parameter 'definitionKey' when calling TransactionalMessagingApi->DeleteQueuedMessagesForEmailDefinition");

            var localVarPath = "/messaging/v1/email/definitions/{definitionKey}/queue";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (definitionKey != null) localVarPathParams.Add("definitionKey", this.Configuration.ApiClient.ParameterToString(definitionKey)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteQueuedMessagesForEmailDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeleteQueuedMessagesForSendDefinitionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeleteQueuedMessagesForSendDefinitionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeleteQueuedMessagesForSendDefinitionResponse)));
        }

        /// <summary>
        /// deleteQueuedMessagesForSmsDefinition Deletes the queue for a SMS definition. The SMS definition must be in inactive status.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the SMS definition</param>
        /// <returns>DeleteQueuedMessagesForSendDefinitionResponse</returns>
        public DeleteQueuedMessagesForSendDefinitionResponse DeleteQueuedMessagesForSmsDefinition (string definitionKey)
        {
             ApiResponse<DeleteQueuedMessagesForSendDefinitionResponse> localVarResponse = DeleteQueuedMessagesForSmsDefinitionWithHttpInfo(definitionKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// deleteQueuedMessagesForSmsDefinition Deletes the queue for a SMS definition. The SMS definition must be in inactive status.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the SMS definition</param>
        /// <returns>ApiResponse of DeleteQueuedMessagesForSendDefinitionResponse</returns>
        public ApiResponse< DeleteQueuedMessagesForSendDefinitionResponse > DeleteQueuedMessagesForSmsDefinitionWithHttpInfo (string definitionKey)
        {
            // verify the required parameter 'definitionKey' is set
            if (definitionKey == null)
                throw new ApiException(400, "Missing required parameter 'definitionKey' when calling TransactionalMessagingApi->DeleteQueuedMessagesForSmsDefinition");

            var localVarPath = "/messaging/v1/sms/definitions/{definitionKey}/queue";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (definitionKey != null) localVarPathParams.Add("definitionKey", this.Configuration.ApiClient.ParameterToString(definitionKey)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteQueuedMessagesForSmsDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeleteQueuedMessagesForSendDefinitionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeleteQueuedMessagesForSendDefinitionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeleteQueuedMessagesForSendDefinitionResponse)));
        }

        /// <summary>
        /// deleteQueuedMessagesForSmsDefinition Deletes the queue for a SMS definition. The SMS definition must be in inactive status.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the SMS definition</param>
        /// <returns>Task of DeleteQueuedMessagesForSendDefinitionResponse</returns>
        public async System.Threading.Tasks.Task<DeleteQueuedMessagesForSendDefinitionResponse> DeleteQueuedMessagesForSmsDefinitionAsync (string definitionKey)
        {
             ApiResponse<DeleteQueuedMessagesForSendDefinitionResponse> localVarResponse = await DeleteQueuedMessagesForSmsDefinitionAsyncWithHttpInfo(definitionKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// deleteQueuedMessagesForSmsDefinition Deletes the queue for a SMS definition. The SMS definition must be in inactive status.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the SMS definition</param>
        /// <returns>Task of ApiResponse (DeleteQueuedMessagesForSendDefinitionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DeleteQueuedMessagesForSendDefinitionResponse>> DeleteQueuedMessagesForSmsDefinitionAsyncWithHttpInfo (string definitionKey)
        {
            // verify the required parameter 'definitionKey' is set
            if (definitionKey == null)
                throw new ApiException(400, "Missing required parameter 'definitionKey' when calling TransactionalMessagingApi->DeleteQueuedMessagesForSmsDefinition");

            var localVarPath = "/messaging/v1/sms/definitions/{definitionKey}/queue";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (definitionKey != null) localVarPathParams.Add("definitionKey", this.Configuration.ApiClient.ParameterToString(definitionKey)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteQueuedMessagesForSmsDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeleteQueuedMessagesForSendDefinitionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeleteQueuedMessagesForSendDefinitionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeleteQueuedMessagesForSendDefinitionResponse)));
        }

        /// <summary>
        /// deleteSmsDefinition Deletes an sms definition. You can&#39;t restore a deleted definition. The deleted definition is archived, and a delete location of the definition key is provided in the response for reference. You can reuse a deleted definition key because the information associated with it is copied to a new unique identifier.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the definition to delete</param>
        /// <returns>DeleteSendDefinitionResponse</returns>
        public DeleteSendDefinitionResponse DeleteSmsDefinition (string definitionKey)
        {
             ApiResponse<DeleteSendDefinitionResponse> localVarResponse = DeleteSmsDefinitionWithHttpInfo(definitionKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// deleteSmsDefinition Deletes an sms definition. You can&#39;t restore a deleted definition. The deleted definition is archived, and a delete location of the definition key is provided in the response for reference. You can reuse a deleted definition key because the information associated with it is copied to a new unique identifier.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the definition to delete</param>
        /// <returns>ApiResponse of DeleteSendDefinitionResponse</returns>
        public ApiResponse< DeleteSendDefinitionResponse > DeleteSmsDefinitionWithHttpInfo (string definitionKey)
        {
            // verify the required parameter 'definitionKey' is set
            if (definitionKey == null)
                throw new ApiException(400, "Missing required parameter 'definitionKey' when calling TransactionalMessagingApi->DeleteSmsDefinition");

            var localVarPath = "/messaging/v1/sms/definitions/{definitionKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (definitionKey != null) localVarPathParams.Add("definitionKey", this.Configuration.ApiClient.ParameterToString(definitionKey)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteSmsDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeleteSendDefinitionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeleteSendDefinitionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeleteSendDefinitionResponse)));
        }

        /// <summary>
        /// deleteSmsDefinition Deletes an sms definition. You can&#39;t restore a deleted definition. The deleted definition is archived, and a delete location of the definition key is provided in the response for reference. You can reuse a deleted definition key because the information associated with it is copied to a new unique identifier.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the definition to delete</param>
        /// <returns>Task of DeleteSendDefinitionResponse</returns>
        public async System.Threading.Tasks.Task<DeleteSendDefinitionResponse> DeleteSmsDefinitionAsync (string definitionKey)
        {
             ApiResponse<DeleteSendDefinitionResponse> localVarResponse = await DeleteSmsDefinitionAsyncWithHttpInfo(definitionKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// deleteSmsDefinition Deletes an sms definition. You can&#39;t restore a deleted definition. The deleted definition is archived, and a delete location of the definition key is provided in the response for reference. You can reuse a deleted definition key because the information associated with it is copied to a new unique identifier.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the definition to delete</param>
        /// <returns>Task of ApiResponse (DeleteSendDefinitionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DeleteSendDefinitionResponse>> DeleteSmsDefinitionAsyncWithHttpInfo (string definitionKey)
        {
            // verify the required parameter 'definitionKey' is set
            if (definitionKey == null)
                throw new ApiException(400, "Missing required parameter 'definitionKey' when calling TransactionalMessagingApi->DeleteSmsDefinition");

            var localVarPath = "/messaging/v1/sms/definitions/{definitionKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (definitionKey != null) localVarPathParams.Add("definitionKey", this.Configuration.ApiClient.ParameterToString(definitionKey)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteSmsDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeleteSendDefinitionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeleteSendDefinitionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeleteSendDefinitionResponse)));
        }

        /// <summary>
        /// getEmailDefinition Gets email definition configuration details for a definition key.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the definition to get</param>
        /// <returns>EmailDefinition</returns>
        public EmailDefinition GetEmailDefinition (string definitionKey)
        {
             ApiResponse<EmailDefinition> localVarResponse = GetEmailDefinitionWithHttpInfo(definitionKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// getEmailDefinition Gets email definition configuration details for a definition key.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the definition to get</param>
        /// <returns>ApiResponse of EmailDefinition</returns>
        public ApiResponse< EmailDefinition > GetEmailDefinitionWithHttpInfo (string definitionKey)
        {
            // verify the required parameter 'definitionKey' is set
            if (definitionKey == null)
                throw new ApiException(400, "Missing required parameter 'definitionKey' when calling TransactionalMessagingApi->GetEmailDefinition");

            var localVarPath = "/messaging/v1/email/definitions/{definitionKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (definitionKey != null) localVarPathParams.Add("definitionKey", this.Configuration.ApiClient.ParameterToString(definitionKey)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailDefinition>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailDefinition) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailDefinition)));
        }

        /// <summary>
        /// getEmailDefinition Gets email definition configuration details for a definition key.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the definition to get</param>
        /// <returns>Task of EmailDefinition</returns>
        public async System.Threading.Tasks.Task<EmailDefinition> GetEmailDefinitionAsync (string definitionKey)
        {
             ApiResponse<EmailDefinition> localVarResponse = await GetEmailDefinitionAsyncWithHttpInfo(definitionKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// getEmailDefinition Gets email definition configuration details for a definition key.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the definition to get</param>
        /// <returns>Task of ApiResponse (EmailDefinition)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailDefinition>> GetEmailDefinitionAsyncWithHttpInfo (string definitionKey)
        {
            // verify the required parameter 'definitionKey' is set
            if (definitionKey == null)
                throw new ApiException(400, "Missing required parameter 'definitionKey' when calling TransactionalMessagingApi->GetEmailDefinition");

            var localVarPath = "/messaging/v1/email/definitions/{definitionKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (definitionKey != null) localVarPathParams.Add("definitionKey", this.Configuration.ApiClient.ParameterToString(definitionKey)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailDefinition>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailDefinition) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailDefinition)));
        }

        /// <summary>
        /// getEmailDefinitions Gets a list of email definitions.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter by status type. Accepted values are active, inactive, or deleted. Valid operations are eq and neq. (optional)</param>
        /// <param name="pageSize">Number of definitions, which are array elements, to return per paged response. (optional)</param>
        /// <param name="page">Page number to return. (optional)</param>
        /// <param name="orderBy">Sort by a dimension. You can sort by only one dimension. Accepted values are definitionKey, name, createdDate, modifiedDate, and status. (optional)</param>
        /// <returns>GetEmailDefinitionsResponse</returns>
        public GetEmailDefinitionsResponse GetEmailDefinitions (string filter = null, decimal? pageSize = null, decimal? page = null, string orderBy = null)
        {
             ApiResponse<GetEmailDefinitionsResponse> localVarResponse = GetEmailDefinitionsWithHttpInfo(filter, pageSize, page, orderBy);
             return localVarResponse.Data;
        }

        /// <summary>
        /// getEmailDefinitions Gets a list of email definitions.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter by status type. Accepted values are active, inactive, or deleted. Valid operations are eq and neq. (optional)</param>
        /// <param name="pageSize">Number of definitions, which are array elements, to return per paged response. (optional)</param>
        /// <param name="page">Page number to return. (optional)</param>
        /// <param name="orderBy">Sort by a dimension. You can sort by only one dimension. Accepted values are definitionKey, name, createdDate, modifiedDate, and status. (optional)</param>
        /// <returns>ApiResponse of GetEmailDefinitionsResponse</returns>
        public ApiResponse< GetEmailDefinitionsResponse > GetEmailDefinitionsWithHttpInfo (string filter = null, decimal? pageSize = null, decimal? page = null, string orderBy = null)
        {

            var localVarPath = "/messaging/v1/email/definitions/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$pageSize", pageSize)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$page", page)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderBy", orderBy)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailDefinitions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetEmailDefinitionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetEmailDefinitionsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetEmailDefinitionsResponse)));
        }

        /// <summary>
        /// getEmailDefinitions Gets a list of email definitions.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter by status type. Accepted values are active, inactive, or deleted. Valid operations are eq and neq. (optional)</param>
        /// <param name="pageSize">Number of definitions, which are array elements, to return per paged response. (optional)</param>
        /// <param name="page">Page number to return. (optional)</param>
        /// <param name="orderBy">Sort by a dimension. You can sort by only one dimension. Accepted values are definitionKey, name, createdDate, modifiedDate, and status. (optional)</param>
        /// <returns>Task of GetEmailDefinitionsResponse</returns>
        public async System.Threading.Tasks.Task<GetEmailDefinitionsResponse> GetEmailDefinitionsAsync (string filter = null, decimal? pageSize = null, decimal? page = null, string orderBy = null)
        {
             ApiResponse<GetEmailDefinitionsResponse> localVarResponse = await GetEmailDefinitionsAsyncWithHttpInfo(filter, pageSize, page, orderBy);
             return localVarResponse.Data;

        }

        /// <summary>
        /// getEmailDefinitions Gets a list of email definitions.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter by status type. Accepted values are active, inactive, or deleted. Valid operations are eq and neq. (optional)</param>
        /// <param name="pageSize">Number of definitions, which are array elements, to return per paged response. (optional)</param>
        /// <param name="page">Page number to return. (optional)</param>
        /// <param name="orderBy">Sort by a dimension. You can sort by only one dimension. Accepted values are definitionKey, name, createdDate, modifiedDate, and status. (optional)</param>
        /// <returns>Task of ApiResponse (GetEmailDefinitionsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetEmailDefinitionsResponse>> GetEmailDefinitionsAsyncWithHttpInfo (string filter = null, decimal? pageSize = null, decimal? page = null, string orderBy = null)
        {

            var localVarPath = "/messaging/v1/email/definitions/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$pageSize", pageSize)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$page", page)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderBy", orderBy)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailDefinitions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetEmailDefinitionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetEmailDefinitionsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetEmailDefinitionsResponse)));
        }

        /// <summary>
        /// getEmailSendStatusForRecipient Gets the send status for a message. Because this route is rate-limited, use it for infrequent verification of a messageKey. To collect send status at scale, subscribe to transactional send events using the Event Notification Service.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageKey">Unique identifier to track message send status. You must provide it in singleton requests using the recipient attribute. To provide it in batch requests, use the recipients array attribute. If you don’t provide the message key for recipients, it’s generated in the response.</param>
        /// <returns>GetDefinitionSendStatusForRecipientResponse</returns>
        public GetDefinitionSendStatusForRecipientResponse GetEmailSendStatusForRecipient (string messageKey)
        {
             ApiResponse<GetDefinitionSendStatusForRecipientResponse> localVarResponse = GetEmailSendStatusForRecipientWithHttpInfo(messageKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// getEmailSendStatusForRecipient Gets the send status for a message. Because this route is rate-limited, use it for infrequent verification of a messageKey. To collect send status at scale, subscribe to transactional send events using the Event Notification Service.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageKey">Unique identifier to track message send status. You must provide it in singleton requests using the recipient attribute. To provide it in batch requests, use the recipients array attribute. If you don’t provide the message key for recipients, it’s generated in the response.</param>
        /// <returns>ApiResponse of GetDefinitionSendStatusForRecipientResponse</returns>
        public ApiResponse< GetDefinitionSendStatusForRecipientResponse > GetEmailSendStatusForRecipientWithHttpInfo (string messageKey)
        {
            // verify the required parameter 'messageKey' is set
            if (messageKey == null)
                throw new ApiException(400, "Missing required parameter 'messageKey' when calling TransactionalMessagingApi->GetEmailSendStatusForRecipient");

            var localVarPath = "/messaging/v1/email/messages/{messageKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (messageKey != null) localVarPathParams.Add("messageKey", this.Configuration.ApiClient.ParameterToString(messageKey)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailSendStatusForRecipient", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetDefinitionSendStatusForRecipientResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetDefinitionSendStatusForRecipientResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetDefinitionSendStatusForRecipientResponse)));
        }

        /// <summary>
        /// getEmailSendStatusForRecipient Gets the send status for a message. Because this route is rate-limited, use it for infrequent verification of a messageKey. To collect send status at scale, subscribe to transactional send events using the Event Notification Service.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageKey">Unique identifier to track message send status. You must provide it in singleton requests using the recipient attribute. To provide it in batch requests, use the recipients array attribute. If you don’t provide the message key for recipients, it’s generated in the response.</param>
        /// <returns>Task of GetDefinitionSendStatusForRecipientResponse</returns>
        public async System.Threading.Tasks.Task<GetDefinitionSendStatusForRecipientResponse> GetEmailSendStatusForRecipientAsync (string messageKey)
        {
             ApiResponse<GetDefinitionSendStatusForRecipientResponse> localVarResponse = await GetEmailSendStatusForRecipientAsyncWithHttpInfo(messageKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// getEmailSendStatusForRecipient Gets the send status for a message. Because this route is rate-limited, use it for infrequent verification of a messageKey. To collect send status at scale, subscribe to transactional send events using the Event Notification Service.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageKey">Unique identifier to track message send status. You must provide it in singleton requests using the recipient attribute. To provide it in batch requests, use the recipients array attribute. If you don’t provide the message key for recipients, it’s generated in the response.</param>
        /// <returns>Task of ApiResponse (GetDefinitionSendStatusForRecipientResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetDefinitionSendStatusForRecipientResponse>> GetEmailSendStatusForRecipientAsyncWithHttpInfo (string messageKey)
        {
            // verify the required parameter 'messageKey' is set
            if (messageKey == null)
                throw new ApiException(400, "Missing required parameter 'messageKey' when calling TransactionalMessagingApi->GetEmailSendStatusForRecipient");

            var localVarPath = "/messaging/v1/email/messages/{messageKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (messageKey != null) localVarPathParams.Add("messageKey", this.Configuration.ApiClient.ParameterToString(messageKey)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailSendStatusForRecipient", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetDefinitionSendStatusForRecipientResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetDefinitionSendStatusForRecipientResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetDefinitionSendStatusForRecipientResponse)));
        }

        /// <summary>
        /// getEmailsNotSentToRecipients Gets a paginated list of messages that were not sent, ordered from oldest to newest.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Only notSent is supported.</param>
        /// <param name="pageSize">Number of messageKeys (array elements) to return per response page. (optional)</param>
        /// <param name="lastEventId">Event ID from which you want the response to start. To obtain the initial event ID, submit a request without a lastEventId. The events in the response are listed top to bottom from oldest to newest. (optional)</param>
        /// <returns>GetDefinitionsNotSentToRecipientsResponse</returns>
        public GetDefinitionsNotSentToRecipientsResponse GetEmailsNotSentToRecipients (string type, int? pageSize = null, int? lastEventId = null)
        {
             ApiResponse<GetDefinitionsNotSentToRecipientsResponse> localVarResponse = GetEmailsNotSentToRecipientsWithHttpInfo(type, pageSize, lastEventId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// getEmailsNotSentToRecipients Gets a paginated list of messages that were not sent, ordered from oldest to newest.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Only notSent is supported.</param>
        /// <param name="pageSize">Number of messageKeys (array elements) to return per response page. (optional)</param>
        /// <param name="lastEventId">Event ID from which you want the response to start. To obtain the initial event ID, submit a request without a lastEventId. The events in the response are listed top to bottom from oldest to newest. (optional)</param>
        /// <returns>ApiResponse of GetDefinitionsNotSentToRecipientsResponse</returns>
        public ApiResponse< GetDefinitionsNotSentToRecipientsResponse > GetEmailsNotSentToRecipientsWithHttpInfo (string type, int? pageSize = null, int? lastEventId = null)
        {
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling TransactionalMessagingApi->GetEmailsNotSentToRecipients");

            var localVarPath = "/messaging/v1/email/messages/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$pageSize", pageSize)); // query parameter
            if (lastEventId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lastEventId", lastEventId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailsNotSentToRecipients", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetDefinitionsNotSentToRecipientsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetDefinitionsNotSentToRecipientsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetDefinitionsNotSentToRecipientsResponse)));
        }

        /// <summary>
        /// getEmailsNotSentToRecipients Gets a paginated list of messages that were not sent, ordered from oldest to newest.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Only notSent is supported.</param>
        /// <param name="pageSize">Number of messageKeys (array elements) to return per response page. (optional)</param>
        /// <param name="lastEventId">Event ID from which you want the response to start. To obtain the initial event ID, submit a request without a lastEventId. The events in the response are listed top to bottom from oldest to newest. (optional)</param>
        /// <returns>Task of GetDefinitionsNotSentToRecipientsResponse</returns>
        public async System.Threading.Tasks.Task<GetDefinitionsNotSentToRecipientsResponse> GetEmailsNotSentToRecipientsAsync (string type, int? pageSize = null, int? lastEventId = null)
        {
             ApiResponse<GetDefinitionsNotSentToRecipientsResponse> localVarResponse = await GetEmailsNotSentToRecipientsAsyncWithHttpInfo(type, pageSize, lastEventId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// getEmailsNotSentToRecipients Gets a paginated list of messages that were not sent, ordered from oldest to newest.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Only notSent is supported.</param>
        /// <param name="pageSize">Number of messageKeys (array elements) to return per response page. (optional)</param>
        /// <param name="lastEventId">Event ID from which you want the response to start. To obtain the initial event ID, submit a request without a lastEventId. The events in the response are listed top to bottom from oldest to newest. (optional)</param>
        /// <returns>Task of ApiResponse (GetDefinitionsNotSentToRecipientsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetDefinitionsNotSentToRecipientsResponse>> GetEmailsNotSentToRecipientsAsyncWithHttpInfo (string type, int? pageSize = null, int? lastEventId = null)
        {
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling TransactionalMessagingApi->GetEmailsNotSentToRecipients");

            var localVarPath = "/messaging/v1/email/messages/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$pageSize", pageSize)); // query parameter
            if (lastEventId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lastEventId", lastEventId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailsNotSentToRecipients", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetDefinitionsNotSentToRecipientsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetDefinitionsNotSentToRecipientsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetDefinitionsNotSentToRecipientsResponse)));
        }

        /// <summary>
        /// getQueueMetricsForEmailDefinition Gets metrics for the messages of an email definition. Applies to messages that are accepted but not yet processed.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the email definition</param>
        /// <returns>GetQueueMetricsForSendDefinitionResponse</returns>
        public GetQueueMetricsForSendDefinitionResponse GetQueueMetricsForEmailDefinition (string definitionKey)
        {
             ApiResponse<GetQueueMetricsForSendDefinitionResponse> localVarResponse = GetQueueMetricsForEmailDefinitionWithHttpInfo(definitionKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// getQueueMetricsForEmailDefinition Gets metrics for the messages of an email definition. Applies to messages that are accepted but not yet processed.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the email definition</param>
        /// <returns>ApiResponse of GetQueueMetricsForSendDefinitionResponse</returns>
        public ApiResponse< GetQueueMetricsForSendDefinitionResponse > GetQueueMetricsForEmailDefinitionWithHttpInfo (string definitionKey)
        {
            // verify the required parameter 'definitionKey' is set
            if (definitionKey == null)
                throw new ApiException(400, "Missing required parameter 'definitionKey' when calling TransactionalMessagingApi->GetQueueMetricsForEmailDefinition");

            var localVarPath = "/messaging/v1/email/definitions/{definitionKey}/queue";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (definitionKey != null) localVarPathParams.Add("definitionKey", this.Configuration.ApiClient.ParameterToString(definitionKey)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetQueueMetricsForEmailDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetQueueMetricsForSendDefinitionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetQueueMetricsForSendDefinitionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetQueueMetricsForSendDefinitionResponse)));
        }

        /// <summary>
        /// getQueueMetricsForEmailDefinition Gets metrics for the messages of an email definition. Applies to messages that are accepted but not yet processed.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the email definition</param>
        /// <returns>Task of GetQueueMetricsForSendDefinitionResponse</returns>
        public async System.Threading.Tasks.Task<GetQueueMetricsForSendDefinitionResponse> GetQueueMetricsForEmailDefinitionAsync (string definitionKey)
        {
             ApiResponse<GetQueueMetricsForSendDefinitionResponse> localVarResponse = await GetQueueMetricsForEmailDefinitionAsyncWithHttpInfo(definitionKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// getQueueMetricsForEmailDefinition Gets metrics for the messages of an email definition. Applies to messages that are accepted but not yet processed.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the email definition</param>
        /// <returns>Task of ApiResponse (GetQueueMetricsForSendDefinitionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetQueueMetricsForSendDefinitionResponse>> GetQueueMetricsForEmailDefinitionAsyncWithHttpInfo (string definitionKey)
        {
            // verify the required parameter 'definitionKey' is set
            if (definitionKey == null)
                throw new ApiException(400, "Missing required parameter 'definitionKey' when calling TransactionalMessagingApi->GetQueueMetricsForEmailDefinition");

            var localVarPath = "/messaging/v1/email/definitions/{definitionKey}/queue";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (definitionKey != null) localVarPathParams.Add("definitionKey", this.Configuration.ApiClient.ParameterToString(definitionKey)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetQueueMetricsForEmailDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetQueueMetricsForSendDefinitionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetQueueMetricsForSendDefinitionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetQueueMetricsForSendDefinitionResponse)));
        }

        /// <summary>
        /// getQueueMetricsForSmsDefinition Gets metrics for the messages of a SMS definition. Applies to messages that are accepted but not yet processed.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the SMS definition</param>
        /// <returns>GetQueueMetricsForSendDefinitionResponse</returns>
        public GetQueueMetricsForSendDefinitionResponse GetQueueMetricsForSmsDefinition (string definitionKey)
        {
             ApiResponse<GetQueueMetricsForSendDefinitionResponse> localVarResponse = GetQueueMetricsForSmsDefinitionWithHttpInfo(definitionKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// getQueueMetricsForSmsDefinition Gets metrics for the messages of a SMS definition. Applies to messages that are accepted but not yet processed.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the SMS definition</param>
        /// <returns>ApiResponse of GetQueueMetricsForSendDefinitionResponse</returns>
        public ApiResponse< GetQueueMetricsForSendDefinitionResponse > GetQueueMetricsForSmsDefinitionWithHttpInfo (string definitionKey)
        {
            // verify the required parameter 'definitionKey' is set
            if (definitionKey == null)
                throw new ApiException(400, "Missing required parameter 'definitionKey' when calling TransactionalMessagingApi->GetQueueMetricsForSmsDefinition");

            var localVarPath = "/messaging/v1/sms/definitions/{definitionKey}/queue";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (definitionKey != null) localVarPathParams.Add("definitionKey", this.Configuration.ApiClient.ParameterToString(definitionKey)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetQueueMetricsForSmsDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetQueueMetricsForSendDefinitionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetQueueMetricsForSendDefinitionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetQueueMetricsForSendDefinitionResponse)));
        }

        /// <summary>
        /// getQueueMetricsForSmsDefinition Gets metrics for the messages of a SMS definition. Applies to messages that are accepted but not yet processed.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the SMS definition</param>
        /// <returns>Task of GetQueueMetricsForSendDefinitionResponse</returns>
        public async System.Threading.Tasks.Task<GetQueueMetricsForSendDefinitionResponse> GetQueueMetricsForSmsDefinitionAsync (string definitionKey)
        {
             ApiResponse<GetQueueMetricsForSendDefinitionResponse> localVarResponse = await GetQueueMetricsForSmsDefinitionAsyncWithHttpInfo(definitionKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// getQueueMetricsForSmsDefinition Gets metrics for the messages of a SMS definition. Applies to messages that are accepted but not yet processed.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the SMS definition</param>
        /// <returns>Task of ApiResponse (GetQueueMetricsForSendDefinitionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetQueueMetricsForSendDefinitionResponse>> GetQueueMetricsForSmsDefinitionAsyncWithHttpInfo (string definitionKey)
        {
            // verify the required parameter 'definitionKey' is set
            if (definitionKey == null)
                throw new ApiException(400, "Missing required parameter 'definitionKey' when calling TransactionalMessagingApi->GetQueueMetricsForSmsDefinition");

            var localVarPath = "/messaging/v1/sms/definitions/{definitionKey}/queue";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (definitionKey != null) localVarPathParams.Add("definitionKey", this.Configuration.ApiClient.ParameterToString(definitionKey)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetQueueMetricsForSmsDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetQueueMetricsForSendDefinitionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetQueueMetricsForSendDefinitionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetQueueMetricsForSendDefinitionResponse)));
        }

        /// <summary>
        /// getSMSsNotSentToRecipients Gets a paginated list of messages that were not sent, ordered from oldest to newest.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Only notSent is supported.</param>
        /// <param name="pageSize">Number of messageKeys (array elements) to return per response page. (optional)</param>
        /// <param name="lastEventId">Event ID from which you want the response to start. To obtain the initial event ID, submit a request without a lastEventId. The events in the response are listed top to bottom from oldest to newest. (optional)</param>
        /// <returns>GetDefinitionsNotSentToRecipientsResponse</returns>
        public GetDefinitionsNotSentToRecipientsResponse GetSMSsNotSentToRecipients (string type, int? pageSize = null, int? lastEventId = null)
        {
             ApiResponse<GetDefinitionsNotSentToRecipientsResponse> localVarResponse = GetSMSsNotSentToRecipientsWithHttpInfo(type, pageSize, lastEventId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// getSMSsNotSentToRecipients Gets a paginated list of messages that were not sent, ordered from oldest to newest.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Only notSent is supported.</param>
        /// <param name="pageSize">Number of messageKeys (array elements) to return per response page. (optional)</param>
        /// <param name="lastEventId">Event ID from which you want the response to start. To obtain the initial event ID, submit a request without a lastEventId. The events in the response are listed top to bottom from oldest to newest. (optional)</param>
        /// <returns>ApiResponse of GetDefinitionsNotSentToRecipientsResponse</returns>
        public ApiResponse< GetDefinitionsNotSentToRecipientsResponse > GetSMSsNotSentToRecipientsWithHttpInfo (string type, int? pageSize = null, int? lastEventId = null)
        {
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling TransactionalMessagingApi->GetSMSsNotSentToRecipients");

            var localVarPath = "/messaging/v1/sms/messages/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$pageSize", pageSize)); // query parameter
            if (lastEventId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lastEventId", lastEventId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSMSsNotSentToRecipients", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetDefinitionsNotSentToRecipientsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetDefinitionsNotSentToRecipientsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetDefinitionsNotSentToRecipientsResponse)));
        }

        /// <summary>
        /// getSMSsNotSentToRecipients Gets a paginated list of messages that were not sent, ordered from oldest to newest.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Only notSent is supported.</param>
        /// <param name="pageSize">Number of messageKeys (array elements) to return per response page. (optional)</param>
        /// <param name="lastEventId">Event ID from which you want the response to start. To obtain the initial event ID, submit a request without a lastEventId. The events in the response are listed top to bottom from oldest to newest. (optional)</param>
        /// <returns>Task of GetDefinitionsNotSentToRecipientsResponse</returns>
        public async System.Threading.Tasks.Task<GetDefinitionsNotSentToRecipientsResponse> GetSMSsNotSentToRecipientsAsync (string type, int? pageSize = null, int? lastEventId = null)
        {
             ApiResponse<GetDefinitionsNotSentToRecipientsResponse> localVarResponse = await GetSMSsNotSentToRecipientsAsyncWithHttpInfo(type, pageSize, lastEventId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// getSMSsNotSentToRecipients Gets a paginated list of messages that were not sent, ordered from oldest to newest.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Only notSent is supported.</param>
        /// <param name="pageSize">Number of messageKeys (array elements) to return per response page. (optional)</param>
        /// <param name="lastEventId">Event ID from which you want the response to start. To obtain the initial event ID, submit a request without a lastEventId. The events in the response are listed top to bottom from oldest to newest. (optional)</param>
        /// <returns>Task of ApiResponse (GetDefinitionsNotSentToRecipientsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetDefinitionsNotSentToRecipientsResponse>> GetSMSsNotSentToRecipientsAsyncWithHttpInfo (string type, int? pageSize = null, int? lastEventId = null)
        {
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling TransactionalMessagingApi->GetSMSsNotSentToRecipients");

            var localVarPath = "/messaging/v1/sms/messages/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$pageSize", pageSize)); // query parameter
            if (lastEventId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lastEventId", lastEventId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSMSsNotSentToRecipients", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetDefinitionsNotSentToRecipientsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetDefinitionsNotSentToRecipientsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetDefinitionsNotSentToRecipientsResponse)));
        }

        /// <summary>
        /// getSmsDefinition Gets SMS definition configuration details for a definition key.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the definition to get</param>
        /// <returns>SmsDefinition</returns>
        public SmsDefinition GetSmsDefinition (string definitionKey)
        {
             ApiResponse<SmsDefinition> localVarResponse = GetSmsDefinitionWithHttpInfo(definitionKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// getSmsDefinition Gets SMS definition configuration details for a definition key.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the definition to get</param>
        /// <returns>ApiResponse of SmsDefinition</returns>
        public ApiResponse< SmsDefinition > GetSmsDefinitionWithHttpInfo (string definitionKey)
        {
            // verify the required parameter 'definitionKey' is set
            if (definitionKey == null)
                throw new ApiException(400, "Missing required parameter 'definitionKey' when calling TransactionalMessagingApi->GetSmsDefinition");

            var localVarPath = "/messaging/v1/sms/definitions/{definitionKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (definitionKey != null) localVarPathParams.Add("definitionKey", this.Configuration.ApiClient.ParameterToString(definitionKey)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSmsDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SmsDefinition>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SmsDefinition) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SmsDefinition)));
        }

        /// <summary>
        /// getSmsDefinition Gets SMS definition configuration details for a definition key.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the definition to get</param>
        /// <returns>Task of SmsDefinition</returns>
        public async System.Threading.Tasks.Task<SmsDefinition> GetSmsDefinitionAsync (string definitionKey)
        {
             ApiResponse<SmsDefinition> localVarResponse = await GetSmsDefinitionAsyncWithHttpInfo(definitionKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// getSmsDefinition Gets SMS definition configuration details for a definition key.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the definition to get</param>
        /// <returns>Task of ApiResponse (SmsDefinition)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SmsDefinition>> GetSmsDefinitionAsyncWithHttpInfo (string definitionKey)
        {
            // verify the required parameter 'definitionKey' is set
            if (definitionKey == null)
                throw new ApiException(400, "Missing required parameter 'definitionKey' when calling TransactionalMessagingApi->GetSmsDefinition");

            var localVarPath = "/messaging/v1/sms/definitions/{definitionKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (definitionKey != null) localVarPathParams.Add("definitionKey", this.Configuration.ApiClient.ParameterToString(definitionKey)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSmsDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SmsDefinition>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SmsDefinition) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SmsDefinition)));
        }

        /// <summary>
        /// getSmsDefinitions Gets a list of SMS definitions.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter by status type. Accepted values are active, inactive, or deleted. Valid operations are eq and neq. (optional)</param>
        /// <param name="pageSize">Number of definitions, which are array elements, to return per paged response. (optional)</param>
        /// <param name="page">Page number to return. (optional)</param>
        /// <param name="orderBy">Sort by a dimension. You can sort by only one dimension. Accepted values are definitionKey, name, createdDate, modifiedDate, and status. (optional)</param>
        /// <returns>GetSmsDefinitionsResponse</returns>
        public GetSmsDefinitionsResponse GetSmsDefinitions (string filter = null, decimal? pageSize = null, decimal? page = null, string orderBy = null)
        {
             ApiResponse<GetSmsDefinitionsResponse> localVarResponse = GetSmsDefinitionsWithHttpInfo(filter, pageSize, page, orderBy);
             return localVarResponse.Data;
        }

        /// <summary>
        /// getSmsDefinitions Gets a list of SMS definitions.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter by status type. Accepted values are active, inactive, or deleted. Valid operations are eq and neq. (optional)</param>
        /// <param name="pageSize">Number of definitions, which are array elements, to return per paged response. (optional)</param>
        /// <param name="page">Page number to return. (optional)</param>
        /// <param name="orderBy">Sort by a dimension. You can sort by only one dimension. Accepted values are definitionKey, name, createdDate, modifiedDate, and status. (optional)</param>
        /// <returns>ApiResponse of GetSmsDefinitionsResponse</returns>
        public ApiResponse< GetSmsDefinitionsResponse > GetSmsDefinitionsWithHttpInfo (string filter = null, decimal? pageSize = null, decimal? page = null, string orderBy = null)
        {

            var localVarPath = "/messaging/v1/sms/definitions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$pageSize", pageSize)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$page", page)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderBy", orderBy)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSmsDefinitions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetSmsDefinitionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetSmsDefinitionsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetSmsDefinitionsResponse)));
        }

        /// <summary>
        /// getSmsDefinitions Gets a list of SMS definitions.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter by status type. Accepted values are active, inactive, or deleted. Valid operations are eq and neq. (optional)</param>
        /// <param name="pageSize">Number of definitions, which are array elements, to return per paged response. (optional)</param>
        /// <param name="page">Page number to return. (optional)</param>
        /// <param name="orderBy">Sort by a dimension. You can sort by only one dimension. Accepted values are definitionKey, name, createdDate, modifiedDate, and status. (optional)</param>
        /// <returns>Task of GetSmsDefinitionsResponse</returns>
        public async System.Threading.Tasks.Task<GetSmsDefinitionsResponse> GetSmsDefinitionsAsync (string filter = null, decimal? pageSize = null, decimal? page = null, string orderBy = null)
        {
             ApiResponse<GetSmsDefinitionsResponse> localVarResponse = await GetSmsDefinitionsAsyncWithHttpInfo(filter, pageSize, page, orderBy);
             return localVarResponse.Data;

        }

        /// <summary>
        /// getSmsDefinitions Gets a list of SMS definitions.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter by status type. Accepted values are active, inactive, or deleted. Valid operations are eq and neq. (optional)</param>
        /// <param name="pageSize">Number of definitions, which are array elements, to return per paged response. (optional)</param>
        /// <param name="page">Page number to return. (optional)</param>
        /// <param name="orderBy">Sort by a dimension. You can sort by only one dimension. Accepted values are definitionKey, name, createdDate, modifiedDate, and status. (optional)</param>
        /// <returns>Task of ApiResponse (GetSmsDefinitionsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetSmsDefinitionsResponse>> GetSmsDefinitionsAsyncWithHttpInfo (string filter = null, decimal? pageSize = null, decimal? page = null, string orderBy = null)
        {

            var localVarPath = "/messaging/v1/sms/definitions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$pageSize", pageSize)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$page", page)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderBy", orderBy)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSmsDefinitions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetSmsDefinitionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetSmsDefinitionsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetSmsDefinitionsResponse)));
        }

        /// <summary>
        /// getSmsSendStatusForRecipient Gets the send status for a message. Because this route is rate-limited, use it for infrequent verification of a messageKey. To collect send status at scale, subscribe to transactional send events using the Event Notification Service.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageKey">Unique identifier to track message send status. You must provide it in singleton requests using the recipient attribute. To provide message key in batch requests, use the recipients array attribute. If you don’t provide the message key for recipients, it’s generated in the response.</param>
        /// <returns>GetDefinitionSendStatusForRecipientResponse</returns>
        public GetDefinitionSendStatusForRecipientResponse GetSmsSendStatusForRecipient (string messageKey)
        {
             ApiResponse<GetDefinitionSendStatusForRecipientResponse> localVarResponse = GetSmsSendStatusForRecipientWithHttpInfo(messageKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// getSmsSendStatusForRecipient Gets the send status for a message. Because this route is rate-limited, use it for infrequent verification of a messageKey. To collect send status at scale, subscribe to transactional send events using the Event Notification Service.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageKey">Unique identifier to track message send status. You must provide it in singleton requests using the recipient attribute. To provide message key in batch requests, use the recipients array attribute. If you don’t provide the message key for recipients, it’s generated in the response.</param>
        /// <returns>ApiResponse of GetDefinitionSendStatusForRecipientResponse</returns>
        public ApiResponse< GetDefinitionSendStatusForRecipientResponse > GetSmsSendStatusForRecipientWithHttpInfo (string messageKey)
        {
            // verify the required parameter 'messageKey' is set
            if (messageKey == null)
                throw new ApiException(400, "Missing required parameter 'messageKey' when calling TransactionalMessagingApi->GetSmsSendStatusForRecipient");

            var localVarPath = "/messaging/v1/sms/messages/{messageKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (messageKey != null) localVarPathParams.Add("messageKey", this.Configuration.ApiClient.ParameterToString(messageKey)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSmsSendStatusForRecipient", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetDefinitionSendStatusForRecipientResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetDefinitionSendStatusForRecipientResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetDefinitionSendStatusForRecipientResponse)));
        }

        /// <summary>
        /// getSmsSendStatusForRecipient Gets the send status for a message. Because this route is rate-limited, use it for infrequent verification of a messageKey. To collect send status at scale, subscribe to transactional send events using the Event Notification Service.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageKey">Unique identifier to track message send status. You must provide it in singleton requests using the recipient attribute. To provide message key in batch requests, use the recipients array attribute. If you don’t provide the message key for recipients, it’s generated in the response.</param>
        /// <returns>Task of GetDefinitionSendStatusForRecipientResponse</returns>
        public async System.Threading.Tasks.Task<GetDefinitionSendStatusForRecipientResponse> GetSmsSendStatusForRecipientAsync (string messageKey)
        {
             ApiResponse<GetDefinitionSendStatusForRecipientResponse> localVarResponse = await GetSmsSendStatusForRecipientAsyncWithHttpInfo(messageKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// getSmsSendStatusForRecipient Gets the send status for a message. Because this route is rate-limited, use it for infrequent verification of a messageKey. To collect send status at scale, subscribe to transactional send events using the Event Notification Service.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageKey">Unique identifier to track message send status. You must provide it in singleton requests using the recipient attribute. To provide message key in batch requests, use the recipients array attribute. If you don’t provide the message key for recipients, it’s generated in the response.</param>
        /// <returns>Task of ApiResponse (GetDefinitionSendStatusForRecipientResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetDefinitionSendStatusForRecipientResponse>> GetSmsSendStatusForRecipientAsyncWithHttpInfo (string messageKey)
        {
            // verify the required parameter 'messageKey' is set
            if (messageKey == null)
                throw new ApiException(400, "Missing required parameter 'messageKey' when calling TransactionalMessagingApi->GetSmsSendStatusForRecipient");

            var localVarPath = "/messaging/v1/sms/messages/{messageKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (messageKey != null) localVarPathParams.Add("messageKey", this.Configuration.ApiClient.ParameterToString(messageKey)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSmsSendStatusForRecipient", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetDefinitionSendStatusForRecipientResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetDefinitionSendStatusForRecipientResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetDefinitionSendStatusForRecipientResponse)));
        }

        /// <summary>
        /// partiallyUpdateEmailDefinition Updates a specific email definition.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the definition.</param>
        /// <param name="body">JSON Parameters</param>
        /// <returns>EmailDefinition</returns>
        public EmailDefinition PartiallyUpdateEmailDefinition (string definitionKey, UpdateEmailDefinitionRequest body)
        {
             ApiResponse<EmailDefinition> localVarResponse = PartiallyUpdateEmailDefinitionWithHttpInfo(definitionKey, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// partiallyUpdateEmailDefinition Updates a specific email definition.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the definition.</param>
        /// <param name="body">JSON Parameters</param>
        /// <returns>ApiResponse of EmailDefinition</returns>
        public ApiResponse< EmailDefinition > PartiallyUpdateEmailDefinitionWithHttpInfo (string definitionKey, UpdateEmailDefinitionRequest body)
        {
            // verify the required parameter 'definitionKey' is set
            if (definitionKey == null)
                throw new ApiException(400, "Missing required parameter 'definitionKey' when calling TransactionalMessagingApi->PartiallyUpdateEmailDefinition");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling TransactionalMessagingApi->PartiallyUpdateEmailDefinition");

            var localVarPath = "/messaging/v1/email/definitions/{definitionKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (definitionKey != null) localVarPathParams.Add("definitionKey", this.Configuration.ApiClient.ParameterToString(definitionKey)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PartiallyUpdateEmailDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailDefinition>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailDefinition) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailDefinition)));
        }

        /// <summary>
        /// partiallyUpdateEmailDefinition Updates a specific email definition.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the definition.</param>
        /// <param name="body">JSON Parameters</param>
        /// <returns>Task of EmailDefinition</returns>
        public async System.Threading.Tasks.Task<EmailDefinition> PartiallyUpdateEmailDefinitionAsync (string definitionKey, UpdateEmailDefinitionRequest body)
        {
             ApiResponse<EmailDefinition> localVarResponse = await PartiallyUpdateEmailDefinitionAsyncWithHttpInfo(definitionKey, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// partiallyUpdateEmailDefinition Updates a specific email definition.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the definition.</param>
        /// <param name="body">JSON Parameters</param>
        /// <returns>Task of ApiResponse (EmailDefinition)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailDefinition>> PartiallyUpdateEmailDefinitionAsyncWithHttpInfo (string definitionKey, UpdateEmailDefinitionRequest body)
        {
            // verify the required parameter 'definitionKey' is set
            if (definitionKey == null)
                throw new ApiException(400, "Missing required parameter 'definitionKey' when calling TransactionalMessagingApi->PartiallyUpdateEmailDefinition");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling TransactionalMessagingApi->PartiallyUpdateEmailDefinition");

            var localVarPath = "/messaging/v1/email/definitions/{definitionKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (definitionKey != null) localVarPathParams.Add("definitionKey", this.Configuration.ApiClient.ParameterToString(definitionKey)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PartiallyUpdateEmailDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailDefinition>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailDefinition) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailDefinition)));
        }

        /// <summary>
        /// partiallyUpdateSmsDefinition Updates a specific SMS definition.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the definition.</param>
        /// <param name="body">JSON Parameters</param>
        /// <returns>SmsDefinition</returns>
        public SmsDefinition PartiallyUpdateSmsDefinition (string definitionKey, UpdateSmsDefinitionRequest body)
        {
             ApiResponse<SmsDefinition> localVarResponse = PartiallyUpdateSmsDefinitionWithHttpInfo(definitionKey, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// partiallyUpdateSmsDefinition Updates a specific SMS definition.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the definition.</param>
        /// <param name="body">JSON Parameters</param>
        /// <returns>ApiResponse of SmsDefinition</returns>
        public ApiResponse< SmsDefinition > PartiallyUpdateSmsDefinitionWithHttpInfo (string definitionKey, UpdateSmsDefinitionRequest body)
        {
            // verify the required parameter 'definitionKey' is set
            if (definitionKey == null)
                throw new ApiException(400, "Missing required parameter 'definitionKey' when calling TransactionalMessagingApi->PartiallyUpdateSmsDefinition");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling TransactionalMessagingApi->PartiallyUpdateSmsDefinition");

            var localVarPath = "/messaging/v1/sms/definitions/{definitionKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (definitionKey != null) localVarPathParams.Add("definitionKey", this.Configuration.ApiClient.ParameterToString(definitionKey)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PartiallyUpdateSmsDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SmsDefinition>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SmsDefinition) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SmsDefinition)));
        }

        /// <summary>
        /// partiallyUpdateSmsDefinition Updates a specific SMS definition.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the definition.</param>
        /// <param name="body">JSON Parameters</param>
        /// <returns>Task of SmsDefinition</returns>
        public async System.Threading.Tasks.Task<SmsDefinition> PartiallyUpdateSmsDefinitionAsync (string definitionKey, UpdateSmsDefinitionRequest body)
        {
             ApiResponse<SmsDefinition> localVarResponse = await PartiallyUpdateSmsDefinitionAsyncWithHttpInfo(definitionKey, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// partiallyUpdateSmsDefinition Updates a specific SMS definition.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the definition.</param>
        /// <param name="body">JSON Parameters</param>
        /// <returns>Task of ApiResponse (SmsDefinition)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SmsDefinition>> PartiallyUpdateSmsDefinitionAsyncWithHttpInfo (string definitionKey, UpdateSmsDefinitionRequest body)
        {
            // verify the required parameter 'definitionKey' is set
            if (definitionKey == null)
                throw new ApiException(400, "Missing required parameter 'definitionKey' when calling TransactionalMessagingApi->PartiallyUpdateSmsDefinition");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling TransactionalMessagingApi->PartiallyUpdateSmsDefinition");

            var localVarPath = "/messaging/v1/sms/definitions/{definitionKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (definitionKey != null) localVarPathParams.Add("definitionKey", this.Configuration.ApiClient.ParameterToString(definitionKey)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PartiallyUpdateSmsDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SmsDefinition>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SmsDefinition) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SmsDefinition)));
        }

        /// <summary>
        /// sendEmailToMultipleRecipients Sends a message to multiple recipients using an email definition. You can provide a messageKey in the request; otherwise, the messageKey is automatically generated in the response.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Parameters</param>
        /// <returns>SendDefinitionToMultipleRecipientsResponse</returns>
        public SendDefinitionToMultipleRecipientsResponse SendEmailToMultipleRecipients (SendEmailToMultipleRecipientsRequest body)
        {
             ApiResponse<SendDefinitionToMultipleRecipientsResponse> localVarResponse = SendEmailToMultipleRecipientsWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// sendEmailToMultipleRecipients Sends a message to multiple recipients using an email definition. You can provide a messageKey in the request; otherwise, the messageKey is automatically generated in the response.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Parameters</param>
        /// <returns>ApiResponse of SendDefinitionToMultipleRecipientsResponse</returns>
        public ApiResponse< SendDefinitionToMultipleRecipientsResponse > SendEmailToMultipleRecipientsWithHttpInfo (SendEmailToMultipleRecipientsRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling TransactionalMessagingApi->SendEmailToMultipleRecipients");

            var localVarPath = "/messaging/v1/email/messages/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendEmailToMultipleRecipients", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SendDefinitionToMultipleRecipientsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SendDefinitionToMultipleRecipientsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SendDefinitionToMultipleRecipientsResponse)));
        }

        /// <summary>
        /// sendEmailToMultipleRecipients Sends a message to multiple recipients using an email definition. You can provide a messageKey in the request; otherwise, the messageKey is automatically generated in the response.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Parameters</param>
        /// <returns>Task of SendDefinitionToMultipleRecipientsResponse</returns>
        public async System.Threading.Tasks.Task<SendDefinitionToMultipleRecipientsResponse> SendEmailToMultipleRecipientsAsync (SendEmailToMultipleRecipientsRequest body)
        {
             ApiResponse<SendDefinitionToMultipleRecipientsResponse> localVarResponse = await SendEmailToMultipleRecipientsAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// sendEmailToMultipleRecipients Sends a message to multiple recipients using an email definition. You can provide a messageKey in the request; otherwise, the messageKey is automatically generated in the response.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Parameters</param>
        /// <returns>Task of ApiResponse (SendDefinitionToMultipleRecipientsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SendDefinitionToMultipleRecipientsResponse>> SendEmailToMultipleRecipientsAsyncWithHttpInfo (SendEmailToMultipleRecipientsRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling TransactionalMessagingApi->SendEmailToMultipleRecipients");

            var localVarPath = "/messaging/v1/email/messages/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendEmailToMultipleRecipients", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SendDefinitionToMultipleRecipientsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SendDefinitionToMultipleRecipientsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SendDefinitionToMultipleRecipientsResponse)));
        }

        /// <summary>
        /// sendEmailToSingleRecipient Sends a message to a single recipient via an email definition using a messageKey path parameter.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageKey">Unique identifier used to track message status. Can be automatically created when you create a message or provided as part of the request. Each recipient in a request must have a unique messageKey. If you use a duplicate messageKey in the same send request, the message is rejected.</param>
        /// <param name="body">JSON Parameters</param>
        /// <returns>SendDefinitionToSingleRecipientResponse</returns>
        public SendDefinitionToSingleRecipientResponse SendEmailToSingleRecipient (string messageKey, SendEmailToSingleRecipientRequest body)
        {
             ApiResponse<SendDefinitionToSingleRecipientResponse> localVarResponse = SendEmailToSingleRecipientWithHttpInfo(messageKey, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// sendEmailToSingleRecipient Sends a message to a single recipient via an email definition using a messageKey path parameter.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageKey">Unique identifier used to track message status. Can be automatically created when you create a message or provided as part of the request. Each recipient in a request must have a unique messageKey. If you use a duplicate messageKey in the same send request, the message is rejected.</param>
        /// <param name="body">JSON Parameters</param>
        /// <returns>ApiResponse of SendDefinitionToSingleRecipientResponse</returns>
        public ApiResponse< SendDefinitionToSingleRecipientResponse > SendEmailToSingleRecipientWithHttpInfo (string messageKey, SendEmailToSingleRecipientRequest body)
        {
            // verify the required parameter 'messageKey' is set
            if (messageKey == null)
                throw new ApiException(400, "Missing required parameter 'messageKey' when calling TransactionalMessagingApi->SendEmailToSingleRecipient");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling TransactionalMessagingApi->SendEmailToSingleRecipient");

            var localVarPath = "/messaging/v1/email/messages/{messageKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (messageKey != null) localVarPathParams.Add("messageKey", this.Configuration.ApiClient.ParameterToString(messageKey)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendEmailToSingleRecipient", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SendDefinitionToSingleRecipientResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SendDefinitionToSingleRecipientResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SendDefinitionToSingleRecipientResponse)));
        }

        /// <summary>
        /// sendEmailToSingleRecipient Sends a message to a single recipient via an email definition using a messageKey path parameter.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageKey">Unique identifier used to track message status. Can be automatically created when you create a message or provided as part of the request. Each recipient in a request must have a unique messageKey. If you use a duplicate messageKey in the same send request, the message is rejected.</param>
        /// <param name="body">JSON Parameters</param>
        /// <returns>Task of SendDefinitionToSingleRecipientResponse</returns>
        public async System.Threading.Tasks.Task<SendDefinitionToSingleRecipientResponse> SendEmailToSingleRecipientAsync (string messageKey, SendEmailToSingleRecipientRequest body)
        {
             ApiResponse<SendDefinitionToSingleRecipientResponse> localVarResponse = await SendEmailToSingleRecipientAsyncWithHttpInfo(messageKey, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// sendEmailToSingleRecipient Sends a message to a single recipient via an email definition using a messageKey path parameter.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageKey">Unique identifier used to track message status. Can be automatically created when you create a message or provided as part of the request. Each recipient in a request must have a unique messageKey. If you use a duplicate messageKey in the same send request, the message is rejected.</param>
        /// <param name="body">JSON Parameters</param>
        /// <returns>Task of ApiResponse (SendDefinitionToSingleRecipientResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SendDefinitionToSingleRecipientResponse>> SendEmailToSingleRecipientAsyncWithHttpInfo (string messageKey, SendEmailToSingleRecipientRequest body)
        {
            // verify the required parameter 'messageKey' is set
            if (messageKey == null)
                throw new ApiException(400, "Missing required parameter 'messageKey' when calling TransactionalMessagingApi->SendEmailToSingleRecipient");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling TransactionalMessagingApi->SendEmailToSingleRecipient");

            var localVarPath = "/messaging/v1/email/messages/{messageKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (messageKey != null) localVarPathParams.Add("messageKey", this.Configuration.ApiClient.ParameterToString(messageKey)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendEmailToSingleRecipient", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SendDefinitionToSingleRecipientResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SendDefinitionToSingleRecipientResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SendDefinitionToSingleRecipientResponse)));
        }

        /// <summary>
        /// sendSmsToMultipleRecipients Sends a message to multiple recipients using an email definition. You can provide a messageKey in the request; otherwise, the messageKey is automatically generated in the response.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Parameters</param>
        /// <returns>SendDefinitionToMultipleRecipientsResponse</returns>
        public SendDefinitionToMultipleRecipientsResponse SendSmsToMultipleRecipients (SendSmsToMultipleRecipientsRequest body)
        {
             ApiResponse<SendDefinitionToMultipleRecipientsResponse> localVarResponse = SendSmsToMultipleRecipientsWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// sendSmsToMultipleRecipients Sends a message to multiple recipients using an email definition. You can provide a messageKey in the request; otherwise, the messageKey is automatically generated in the response.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Parameters</param>
        /// <returns>ApiResponse of SendDefinitionToMultipleRecipientsResponse</returns>
        public ApiResponse< SendDefinitionToMultipleRecipientsResponse > SendSmsToMultipleRecipientsWithHttpInfo (SendSmsToMultipleRecipientsRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling TransactionalMessagingApi->SendSmsToMultipleRecipients");

            var localVarPath = "/messaging/v1/sms/messages/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendSmsToMultipleRecipients", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SendDefinitionToMultipleRecipientsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SendDefinitionToMultipleRecipientsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SendDefinitionToMultipleRecipientsResponse)));
        }

        /// <summary>
        /// sendSmsToMultipleRecipients Sends a message to multiple recipients using an email definition. You can provide a messageKey in the request; otherwise, the messageKey is automatically generated in the response.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Parameters</param>
        /// <returns>Task of SendDefinitionToMultipleRecipientsResponse</returns>
        public async System.Threading.Tasks.Task<SendDefinitionToMultipleRecipientsResponse> SendSmsToMultipleRecipientsAsync (SendSmsToMultipleRecipientsRequest body)
        {
             ApiResponse<SendDefinitionToMultipleRecipientsResponse> localVarResponse = await SendSmsToMultipleRecipientsAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// sendSmsToMultipleRecipients Sends a message to multiple recipients using an email definition. You can provide a messageKey in the request; otherwise, the messageKey is automatically generated in the response.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Parameters</param>
        /// <returns>Task of ApiResponse (SendDefinitionToMultipleRecipientsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SendDefinitionToMultipleRecipientsResponse>> SendSmsToMultipleRecipientsAsyncWithHttpInfo (SendSmsToMultipleRecipientsRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling TransactionalMessagingApi->SendSmsToMultipleRecipients");

            var localVarPath = "/messaging/v1/sms/messages/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendSmsToMultipleRecipients", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SendDefinitionToMultipleRecipientsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SendDefinitionToMultipleRecipientsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SendDefinitionToMultipleRecipientsResponse)));
        }

        /// <summary>
        /// sendSmsToSingleRecipient Sends a message to a single recipient via a SMS definition using a messageKey path parameter.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageKey">Unique identifier of the definition used to track message status. The messageKey can be created automatically when you create a message, or you can provide it as part of the request. Each recipient in a request must have a unique messageKey. If you use a duplicate messageKey in the same send request, the message is rejected.</param>
        /// <param name="body">JSON Parameters</param>
        /// <returns>SendDefinitionToSingleRecipientResponse</returns>
        public SendDefinitionToSingleRecipientResponse SendSmsToSingleRecipient (string messageKey, SendSmsToSingleRecipientRequest body)
        {
             ApiResponse<SendDefinitionToSingleRecipientResponse> localVarResponse = SendSmsToSingleRecipientWithHttpInfo(messageKey, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// sendSmsToSingleRecipient Sends a message to a single recipient via a SMS definition using a messageKey path parameter.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageKey">Unique identifier of the definition used to track message status. The messageKey can be created automatically when you create a message, or you can provide it as part of the request. Each recipient in a request must have a unique messageKey. If you use a duplicate messageKey in the same send request, the message is rejected.</param>
        /// <param name="body">JSON Parameters</param>
        /// <returns>ApiResponse of SendDefinitionToSingleRecipientResponse</returns>
        public ApiResponse< SendDefinitionToSingleRecipientResponse > SendSmsToSingleRecipientWithHttpInfo (string messageKey, SendSmsToSingleRecipientRequest body)
        {
            // verify the required parameter 'messageKey' is set
            if (messageKey == null)
                throw new ApiException(400, "Missing required parameter 'messageKey' when calling TransactionalMessagingApi->SendSmsToSingleRecipient");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling TransactionalMessagingApi->SendSmsToSingleRecipient");

            var localVarPath = "/messaging/v1/sms/messages/{messageKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (messageKey != null) localVarPathParams.Add("messageKey", this.Configuration.ApiClient.ParameterToString(messageKey)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendSmsToSingleRecipient", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SendDefinitionToSingleRecipientResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SendDefinitionToSingleRecipientResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SendDefinitionToSingleRecipientResponse)));
        }

        /// <summary>
        /// sendSmsToSingleRecipient Sends a message to a single recipient via a SMS definition using a messageKey path parameter.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageKey">Unique identifier of the definition used to track message status. The messageKey can be created automatically when you create a message, or you can provide it as part of the request. Each recipient in a request must have a unique messageKey. If you use a duplicate messageKey in the same send request, the message is rejected.</param>
        /// <param name="body">JSON Parameters</param>
        /// <returns>Task of SendDefinitionToSingleRecipientResponse</returns>
        public async System.Threading.Tasks.Task<SendDefinitionToSingleRecipientResponse> SendSmsToSingleRecipientAsync (string messageKey, SendSmsToSingleRecipientRequest body)
        {
             ApiResponse<SendDefinitionToSingleRecipientResponse> localVarResponse = await SendSmsToSingleRecipientAsyncWithHttpInfo(messageKey, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// sendSmsToSingleRecipient Sends a message to a single recipient via a SMS definition using a messageKey path parameter.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageKey">Unique identifier of the definition used to track message status. The messageKey can be created automatically when you create a message, or you can provide it as part of the request. Each recipient in a request must have a unique messageKey. If you use a duplicate messageKey in the same send request, the message is rejected.</param>
        /// <param name="body">JSON Parameters</param>
        /// <returns>Task of ApiResponse (SendDefinitionToSingleRecipientResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SendDefinitionToSingleRecipientResponse>> SendSmsToSingleRecipientAsyncWithHttpInfo (string messageKey, SendSmsToSingleRecipientRequest body)
        {
            // verify the required parameter 'messageKey' is set
            if (messageKey == null)
                throw new ApiException(400, "Missing required parameter 'messageKey' when calling TransactionalMessagingApi->SendSmsToSingleRecipient");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling TransactionalMessagingApi->SendSmsToSingleRecipient");

            var localVarPath = "/messaging/v1/sms/messages/{messageKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (messageKey != null) localVarPathParams.Add("messageKey", this.Configuration.ApiClient.ParameterToString(messageKey)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendSmsToSingleRecipient", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SendDefinitionToSingleRecipientResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SendDefinitionToSingleRecipientResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SendDefinitionToSingleRecipientResponse)));
        }

    }
}
