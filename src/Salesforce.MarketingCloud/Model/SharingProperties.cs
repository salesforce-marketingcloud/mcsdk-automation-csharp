/* 
 * Marketing Cloud REST API
 *
 * Marketing Cloud's REST API is our newest API. It supports multi-channel use cases, is much more lightweight and easy to use than our SOAP API, and is getting more comprehensive with every release.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: mc_sdk@salesforce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Salesforce.MarketingCloud.Client.SwaggerDateConverter;

namespace Salesforce.MarketingCloud.Model
{
    /// <summary>
    /// SharingProperties
    /// </summary>
    [DataContract]
    public partial class SharingProperties :  IEquatable<SharingProperties>, IValidatableObject
    {
        /// <summary>
        /// Indicates the permission that you are granting to the list of MIDs in sharedWith. Possible values are view, edit, or local.
        /// </summary>
        /// <value>Indicates the permission that you are granting to the list of MIDs in sharedWith. Possible values are view, edit, or local.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SharingTypeEnum
        {
            
            /// <summary>
            /// Enum View for value: view
            /// </summary>
            [EnumMember(Value = "view")]
            View = 1,
            
            /// <summary>
            /// Enum Edit for value: edit
            /// </summary>
            [EnumMember(Value = "edit")]
            Edit = 2,
            
            /// <summary>
            /// Enum Local for value: local
            /// </summary>
            [EnumMember(Value = "local")]
            Local = 3
        }

        /// <summary>
        /// Indicates the permission that you are granting to the list of MIDs in sharedWith. Possible values are view, edit, or local.
        /// </summary>
        /// <value>Indicates the permission that you are granting to the list of MIDs in sharedWith. Possible values are view, edit, or local.</value>
        [DataMember(Name="sharingType", EmitDefaultValue=false)]
        public SharingTypeEnum? SharingType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SharingProperties" /> class.
        /// </summary>
        /// <param name="sharingType">Indicates the permission that you are granting to the list of MIDs in sharedWith. Possible values are view, edit, or local..</param>
        /// <param name="sharedWith">List of MID IDs the asset is shared with.</param>
        public SharingProperties(SharingTypeEnum? sharingType = default(SharingTypeEnum?), List<int?> sharedWith = default(List<int?>))
        {
            this.SharingType = sharingType;
            this.SharedWith = sharedWith;
        }
        

        /// <summary>
        /// List of MID IDs the asset is shared with
        /// </summary>
        /// <value>List of MID IDs the asset is shared with</value>
        [DataMember(Name="sharedWith", EmitDefaultValue=false)]
        public List<int?> SharedWith { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SharingProperties {\n");
            sb.Append("  SharingType: ").Append(SharingType).Append("\n");
            sb.Append("  SharedWith: ").Append(SharedWith).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SharingProperties);
        }

        /// <summary>
        /// Returns true if SharingProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of SharingProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SharingProperties input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SharingType == input.SharingType ||
                    (this.SharingType != null &&
                    this.SharingType.Equals(input.SharingType))
                ) && 
                (
                    this.SharedWith == input.SharedWith ||
                    this.SharedWith != null &&
                    this.SharedWith.SequenceEqual(input.SharedWith)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SharingType != null)
                    hashCode = hashCode * 59 + this.SharingType.GetHashCode();
                if (this.SharedWith != null)
                    hashCode = hashCode * 59 + this.SharedWith.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
