/* 
 * Marketing Cloud REST API
 *
 * Marketing Cloud's REST API is our newest API. It supports multi-channel use cases, is much more lightweight and easy to use than our SOAP API, and is getting more comprehensive with every release.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: mc_sdk@salesforce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Salesforce.MarketingCloud.Client.SwaggerDateConverter;

namespace Salesforce.MarketingCloud.Model
{
    /// <summary>
    /// SendSmsToMultipleRecipientsSubscriptionsRequest
    /// </summary>
    [DataContract]
    public partial class SendSmsToMultipleRecipientsSubscriptionsRequest :  IEquatable<SendSmsToMultipleRecipientsSubscriptionsRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SendSmsToMultipleRecipientsSubscriptionsRequest" /> class.
        /// </summary>
        /// <param name="resubscribe">Forces the message send request to subscribe the mobile number back into a short code if a user may have requested STOP. Often used to ensure that critical transactional messages are delivered irrespective of a mobile number subscriber status..</param>
        public SendSmsToMultipleRecipientsSubscriptionsRequest(bool? resubscribe = default(bool?))
        {
            this.Resubscribe = resubscribe;
        }
        
        /// <summary>
        /// Forces the message send request to subscribe the mobile number back into a short code if a user may have requested STOP. Often used to ensure that critical transactional messages are delivered irrespective of a mobile number subscriber status.
        /// </summary>
        /// <value>Forces the message send request to subscribe the mobile number back into a short code if a user may have requested STOP. Often used to ensure that critical transactional messages are delivered irrespective of a mobile number subscriber status.</value>
        [DataMember(Name="resubscribe", EmitDefaultValue=false)]
        public bool? Resubscribe { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SendSmsToMultipleRecipientsSubscriptionsRequest {\n");
            sb.Append("  Resubscribe: ").Append(Resubscribe).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SendSmsToMultipleRecipientsSubscriptionsRequest);
        }

        /// <summary>
        /// Returns true if SendSmsToMultipleRecipientsSubscriptionsRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of SendSmsToMultipleRecipientsSubscriptionsRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SendSmsToMultipleRecipientsSubscriptionsRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Resubscribe == input.Resubscribe ||
                    (this.Resubscribe != null &&
                    this.Resubscribe.Equals(input.Resubscribe))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Resubscribe != null)
                    hashCode = hashCode * 59 + this.Resubscribe.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
