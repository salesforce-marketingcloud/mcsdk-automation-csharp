/* 
 * Marketing Cloud REST API
 *
 * Marketing Cloud's REST API is our newest API. It supports multi-channel use cases, is much more lightweight and easy to use than our SOAP API, and is getting more comprehensive with every release.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: mc_sdk@salesforce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Salesforce.MarketingCloud.Client.SwaggerDateConverter;

namespace Salesforce.MarketingCloud.Model
{
    /// <summary>
    /// CreateSmsDefinitionRequest
    /// </summary>
    [DataContract]
    public partial class CreateSmsDefinitionRequest :  IEquatable<CreateSmsDefinitionRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateSmsDefinitionRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateSmsDefinitionRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateSmsDefinitionRequest" /> class.
        /// </summary>
        /// <param name="definitionKey">Unique, user-generated key to access the definition object. (required).</param>
        /// <param name="name">Name of the definition. Must be unique. (required).</param>
        /// <param name="content">content (required).</param>
        /// <param name="status">Operational state of the definition: active, inactive, or deleted. A message sent to an active definition is processed and delivered. A message sent to an inactive definition isn’t processed or delivered. Instead, the message is queued for later processing for up to three days..</param>
        /// <param name="description">User-provided description of the SMS definition..</param>
        /// <param name="subscriptions">subscriptions (required).</param>
        public CreateSmsDefinitionRequest(string definitionKey = default(string), string name = default(string), CreateSmsDefinitionContent content = default(CreateSmsDefinitionContent), string status = default(string), string description = default(string), CreateSmsDefinitionSubscriptions subscriptions = default(CreateSmsDefinitionSubscriptions))
        {
            // to ensure "definitionKey" is required (not null)
            if (definitionKey == null)
            {
                throw new InvalidDataException("definitionKey is a required property for CreateSmsDefinitionRequest and cannot be null");
            }
            else
            {
                this.DefinitionKey = definitionKey;
            }
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for CreateSmsDefinitionRequest and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // to ensure "content" is required (not null)
            if (content == null)
            {
                throw new InvalidDataException("content is a required property for CreateSmsDefinitionRequest and cannot be null");
            }
            else
            {
                this.Content = content;
            }
            // to ensure "subscriptions" is required (not null)
            if (subscriptions == null)
            {
                throw new InvalidDataException("subscriptions is a required property for CreateSmsDefinitionRequest and cannot be null");
            }
            else
            {
                this.Subscriptions = subscriptions;
            }
            this.Status = status;
            this.Description = description;
        }
        
        /// <summary>
        /// Unique, user-generated key to access the definition object.
        /// </summary>
        /// <value>Unique, user-generated key to access the definition object.</value>
        [DataMember(Name="definitionKey", EmitDefaultValue=false)]
        public string DefinitionKey { get; set; }

        /// <summary>
        /// Name of the definition. Must be unique.
        /// </summary>
        /// <value>Name of the definition. Must be unique.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Content
        /// </summary>
        [DataMember(Name="content", EmitDefaultValue=false)]
        public CreateSmsDefinitionContent Content { get; set; }

        /// <summary>
        /// Operational state of the definition: active, inactive, or deleted. A message sent to an active definition is processed and delivered. A message sent to an inactive definition isn’t processed or delivered. Instead, the message is queued for later processing for up to three days.
        /// </summary>
        /// <value>Operational state of the definition: active, inactive, or deleted. A message sent to an active definition is processed and delivered. A message sent to an inactive definition isn’t processed or delivered. Instead, the message is queued for later processing for up to three days.</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// The date the object was created.
        /// </summary>
        /// <value>The date the object was created.</value>
        [DataMember(Name="createdDate", EmitDefaultValue=false)]
        public DateTime? CreatedDate { get; private set; }

        /// <summary>
        /// The date the object was modified.
        /// </summary>
        /// <value>The date the object was modified.</value>
        [DataMember(Name="modifiedDate", EmitDefaultValue=false)]
        public DateTime? ModifiedDate { get; private set; }

        /// <summary>
        /// User-provided description of the SMS definition.
        /// </summary>
        /// <value>User-provided description of the SMS definition.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Subscriptions
        /// </summary>
        [DataMember(Name="subscriptions", EmitDefaultValue=false)]
        public CreateSmsDefinitionSubscriptions Subscriptions { get; set; }

        /// <summary>
        /// The ID of the request
        /// </summary>
        /// <value>The ID of the request</value>
        [DataMember(Name="requestId", EmitDefaultValue=false)]
        public string RequestId { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateSmsDefinitionRequest {\n");
            sb.Append("  DefinitionKey: ").Append(DefinitionKey).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("  ModifiedDate: ").Append(ModifiedDate).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Subscriptions: ").Append(Subscriptions).Append("\n");
            sb.Append("  RequestId: ").Append(RequestId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateSmsDefinitionRequest);
        }

        /// <summary>
        /// Returns true if CreateSmsDefinitionRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateSmsDefinitionRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateSmsDefinitionRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DefinitionKey == input.DefinitionKey ||
                    (this.DefinitionKey != null &&
                    this.DefinitionKey.Equals(input.DefinitionKey))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Content == input.Content ||
                    (this.Content != null &&
                    this.Content.Equals(input.Content))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.CreatedDate == input.CreatedDate ||
                    (this.CreatedDate != null &&
                    this.CreatedDate.Equals(input.CreatedDate))
                ) && 
                (
                    this.ModifiedDate == input.ModifiedDate ||
                    (this.ModifiedDate != null &&
                    this.ModifiedDate.Equals(input.ModifiedDate))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Subscriptions == input.Subscriptions ||
                    (this.Subscriptions != null &&
                    this.Subscriptions.Equals(input.Subscriptions))
                ) && 
                (
                    this.RequestId == input.RequestId ||
                    (this.RequestId != null &&
                    this.RequestId.Equals(input.RequestId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DefinitionKey != null)
                    hashCode = hashCode * 59 + this.DefinitionKey.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Content != null)
                    hashCode = hashCode * 59 + this.Content.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.CreatedDate != null)
                    hashCode = hashCode * 59 + this.CreatedDate.GetHashCode();
                if (this.ModifiedDate != null)
                    hashCode = hashCode * 59 + this.ModifiedDate.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Subscriptions != null)
                    hashCode = hashCode * 59 + this.Subscriptions.GetHashCode();
                if (this.RequestId != null)
                    hashCode = hashCode * 59 + this.RequestId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
