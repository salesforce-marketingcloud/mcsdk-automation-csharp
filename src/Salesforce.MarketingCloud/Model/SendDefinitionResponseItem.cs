/* 
 * Marketing Cloud REST API
 *
 * Marketing Cloud's REST API is our newest API. It supports multi-channel use cases, is much more lightweight and easy to use than our SOAP API, and is getting more comprehensive with every release.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: mc_sdk@salesforce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Salesforce.MarketingCloud.Client.SwaggerDateConverter;

namespace Salesforce.MarketingCloud.Model
{
    /// <summary>
    /// SendDefinitionResponseItem
    /// </summary>
    [DataContract]
    public partial class SendDefinitionResponseItem :  IEquatable<SendDefinitionResponseItem>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SendDefinitionResponseItem" /> class.
        /// </summary>
        /// <param name="messageKey">Unique identifier used to track message status..</param>
        /// <param name="errorCode">The specific error code.</param>
        /// <param name="message">The error message.</param>
        public SendDefinitionResponseItem(string messageKey = default(string), decimal? errorCode = default(decimal?), string message = default(string))
        {
            this.MessageKey = messageKey;
            this.ErrorCode = errorCode;
            this.Message = message;
        }
        
        /// <summary>
        /// Unique identifier used to track message status.
        /// </summary>
        /// <value>Unique identifier used to track message status.</value>
        [DataMember(Name="messageKey", EmitDefaultValue=false)]
        public string MessageKey { get; set; }

        /// <summary>
        /// The specific error code
        /// </summary>
        /// <value>The specific error code</value>
        [DataMember(Name="errorCode", EmitDefaultValue=false)]
        public decimal? ErrorCode { get; set; }

        /// <summary>
        /// The error message
        /// </summary>
        /// <value>The error message</value>
        [DataMember(Name="message", EmitDefaultValue=false)]
        public string Message { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SendDefinitionResponseItem {\n");
            sb.Append("  MessageKey: ").Append(MessageKey).Append("\n");
            sb.Append("  ErrorCode: ").Append(ErrorCode).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SendDefinitionResponseItem);
        }

        /// <summary>
        /// Returns true if SendDefinitionResponseItem instances are equal
        /// </summary>
        /// <param name="input">Instance of SendDefinitionResponseItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SendDefinitionResponseItem input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MessageKey == input.MessageKey ||
                    (this.MessageKey != null &&
                    this.MessageKey.Equals(input.MessageKey))
                ) && 
                (
                    this.ErrorCode == input.ErrorCode ||
                    (this.ErrorCode != null &&
                    this.ErrorCode.Equals(input.ErrorCode))
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MessageKey != null)
                    hashCode = hashCode * 59 + this.MessageKey.GetHashCode();
                if (this.ErrorCode != null)
                    hashCode = hashCode * 59 + this.ErrorCode.GetHashCode();
                if (this.Message != null)
                    hashCode = hashCode * 59 + this.Message.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
