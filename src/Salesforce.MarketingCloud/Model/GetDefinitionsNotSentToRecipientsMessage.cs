/* 
 * Marketing Cloud REST API
 *
 * Marketing Cloud's REST API is our newest API. It supports multi-channel use cases, is much more lightweight and easy to use than our SOAP API, and is getting more comprehensive with every release.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: mc_sdk@salesforce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Salesforce.MarketingCloud.Client.SwaggerDateConverter;

namespace Salesforce.MarketingCloud.Model
{
    /// <summary>
    /// GetDefinitionsNotSentToRecipientsMessage
    /// </summary>
    [DataContract]
    public partial class GetDefinitionsNotSentToRecipientsMessage :  IEquatable<GetDefinitionsNotSentToRecipientsMessage>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetDefinitionsNotSentToRecipientsMessage" /> class.
        /// </summary>
        /// <param name="statusCode">The specific status code.</param>
        /// <param name="statusMessage">The specific status message.</param>
        /// <param name="eventCategoryType">The status of the message.</param>
        /// <param name="timestamp">The date the ....</param>
        /// <param name="definitionKey">Unique, user-generated key to access the definition object..</param>
        /// <param name="eventID">eventID.</param>
        /// <param name="info">info.</param>
        public GetDefinitionsNotSentToRecipientsMessage(int? statusCode = default(int?), string statusMessage = default(string), string eventCategoryType = default(string), DateTime? timestamp = default(DateTime?), string definitionKey = default(string), decimal? eventID = default(decimal?), GetDefinitionsNotSentToRecipientsMessageInfo info = default(GetDefinitionsNotSentToRecipientsMessageInfo))
        {
            this.StatusCode = statusCode;
            this.StatusMessage = statusMessage;
            this.EventCategoryType = eventCategoryType;
            this.Timestamp = timestamp;
            this.DefinitionKey = definitionKey;
            this.EventID = eventID;
            this.Info = info;
        }
        
        /// <summary>
        /// The specific status code
        /// </summary>
        /// <value>The specific status code</value>
        [DataMember(Name="statusCode", EmitDefaultValue=false)]
        public int? StatusCode { get; set; }

        /// <summary>
        /// The specific status message
        /// </summary>
        /// <value>The specific status message</value>
        [DataMember(Name="statusMessage", EmitDefaultValue=false)]
        public string StatusMessage { get; set; }

        /// <summary>
        /// The status of the message
        /// </summary>
        /// <value>The status of the message</value>
        [DataMember(Name="eventCategoryType", EmitDefaultValue=false)]
        public string EventCategoryType { get; set; }

        /// <summary>
        /// The date the ...
        /// </summary>
        /// <value>The date the ...</value>
        [DataMember(Name="timestamp", EmitDefaultValue=false)]
        public DateTime? Timestamp { get; set; }

        /// <summary>
        /// Unique, user-generated key to access the definition object.
        /// </summary>
        /// <value>Unique, user-generated key to access the definition object.</value>
        [DataMember(Name="definitionKey", EmitDefaultValue=false)]
        public string DefinitionKey { get; set; }

        /// <summary>
        /// Gets or Sets EventID
        /// </summary>
        [DataMember(Name="eventID", EmitDefaultValue=false)]
        public decimal? EventID { get; set; }

        /// <summary>
        /// Gets or Sets Info
        /// </summary>
        [DataMember(Name="info", EmitDefaultValue=false)]
        public GetDefinitionsNotSentToRecipientsMessageInfo Info { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetDefinitionsNotSentToRecipientsMessage {\n");
            sb.Append("  StatusCode: ").Append(StatusCode).Append("\n");
            sb.Append("  StatusMessage: ").Append(StatusMessage).Append("\n");
            sb.Append("  EventCategoryType: ").Append(EventCategoryType).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  DefinitionKey: ").Append(DefinitionKey).Append("\n");
            sb.Append("  EventID: ").Append(EventID).Append("\n");
            sb.Append("  Info: ").Append(Info).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetDefinitionsNotSentToRecipientsMessage);
        }

        /// <summary>
        /// Returns true if GetDefinitionsNotSentToRecipientsMessage instances are equal
        /// </summary>
        /// <param name="input">Instance of GetDefinitionsNotSentToRecipientsMessage to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetDefinitionsNotSentToRecipientsMessage input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.StatusCode == input.StatusCode ||
                    (this.StatusCode != null &&
                    this.StatusCode.Equals(input.StatusCode))
                ) && 
                (
                    this.StatusMessage == input.StatusMessage ||
                    (this.StatusMessage != null &&
                    this.StatusMessage.Equals(input.StatusMessage))
                ) && 
                (
                    this.EventCategoryType == input.EventCategoryType ||
                    (this.EventCategoryType != null &&
                    this.EventCategoryType.Equals(input.EventCategoryType))
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                ) && 
                (
                    this.DefinitionKey == input.DefinitionKey ||
                    (this.DefinitionKey != null &&
                    this.DefinitionKey.Equals(input.DefinitionKey))
                ) && 
                (
                    this.EventID == input.EventID ||
                    (this.EventID != null &&
                    this.EventID.Equals(input.EventID))
                ) && 
                (
                    this.Info == input.Info ||
                    (this.Info != null &&
                    this.Info.Equals(input.Info))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.StatusCode != null)
                    hashCode = hashCode * 59 + this.StatusCode.GetHashCode();
                if (this.StatusMessage != null)
                    hashCode = hashCode * 59 + this.StatusMessage.GetHashCode();
                if (this.EventCategoryType != null)
                    hashCode = hashCode * 59 + this.EventCategoryType.GetHashCode();
                if (this.Timestamp != null)
                    hashCode = hashCode * 59 + this.Timestamp.GetHashCode();
                if (this.DefinitionKey != null)
                    hashCode = hashCode * 59 + this.DefinitionKey.GetHashCode();
                if (this.EventID != null)
                    hashCode = hashCode * 59 + this.EventID.GetHashCode();
                if (this.Info != null)
                    hashCode = hashCode * 59 + this.Info.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
